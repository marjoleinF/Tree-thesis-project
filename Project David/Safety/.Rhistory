library("haven")
library("dbarts")
library("glmertree")
library("dplyr")
library("here")
library("multilevel")
library("tidyverse")
library("LongCART")
set.seed(42)
data(ACTG175)
## Remove missings
ACTG175 <- ACTG175[!is.na(ACTG175$cd4), ]
## Correct coding of factors
ACTG175$hemo <- factor(ACTG175$hemo)
ACTG175$homo <- factor(ACTG175$homo)
ACTG175$drugs <- factor(ACTG175$drugs)
ACTG175$oprior <- factor(ACTG175$oprior)
ACTG175$z30 <- factor(ACTG175$z30)
ACTG175$zprior <- factor(ACTG175$zprior)
ACTG175$race <- factor(ACTG175$race)
ACTG175$str2 <- factor(ACTG175$str2)
ACTG175$symptom <- factor(ACTG175$symptom)
ACTG175$treat <- factor(ACTG175$treat)
ACTG175$offtrt <- factor(ACTG175$offtrt)
data <- ACTG175[ACTG175$pidnum %in% sample(x = unique(ACTG175$pidnum), size = 455),]
rm(ACTG175)
system.time({
# this block makes sure "traindat" contains every level
levelvec <- 0
while(mean(levelvec) != 1) {
fold_ids <- sample(rep(1:nfolds, times = ceiling(nrow(data)/nfolds)), size = nrow(data), replace = FALSE)
levelvec <- numeric()
for (i in 1:nfolds){
trainlevels <- data[fold_ids != i, ]$pidnum
testlevels <- data[fold_ids == i, ]$pidnum
levelvec[i] <- mean(testlevels %in% trainlevels)
# print(levelvec)
if(levelvec[i] != 1){break}
}
i <- i + 1
if(i %% 1000 == 0){print(paste0("iteration: ", i))}
}
print("done")
})
set.seed(42)
nfolds <- 10
nreps <- 10
ngensizes <- c(1,5,10)
palt <- c(0, 0.25, 0.5)
tel <- 0
use_weights <- TRUE
baygen <- TRUE
system.time({
# this block makes sure "traindat" contains every level
levelvec <- 0
while(mean(levelvec) != 1) {
fold_ids <- sample(rep(1:nfolds, times = ceiling(nrow(data)/nfolds)), size = nrow(data), replace = FALSE)
levelvec <- numeric()
for (i in 1:nfolds){
trainlevels <- data[fold_ids != i, ]$pidnum
testlevels <- data[fold_ids == i, ]$pidnum
levelvec[i] <- mean(testlevels %in% trainlevels)
# print(levelvec)
if(levelvec[i] != 1){break}
}
i <- i + 1
if(i %% 1000 == 0){print(paste0("iteration: ", i))}
}
print("done")
})
i <- 1000
if(i %% 1000 == 0){print(paste0("iteration: ", i))}
system.time({
i <- 0
# this block makes sure "traindat" contains every level
levelvec <- 0
while(mean(levelvec) != 1) {
i <- i + 1
if(i %% 1000 == 0){print(paste0("iteration: ", i))}
fold_ids <- sample(rep(1:nfolds, times = ceiling(nrow(data)/nfolds)), size = nrow(data), replace = FALSE)
levelvec <- numeric()
for (i in 1:nfolds){
trainlevels <- data[fold_ids != i, ]$pidnum
testlevels <- data[fold_ids == i, ]$pidnum
levelvec[i] <- mean(testlevels %in% trainlevels)
# print(levelvec)
if(levelvec[i] != 1){break}
}
}
print("done")
})
system.time({
i <- 0
# this block makes sure "traindat" contains every level
levelvec <- 0
while(mean(levelvec) != 1) {
i <- i + 1
if(i %% 100 == 0){print(paste0("iteration: ", i))}
fold_ids <- sample(rep(1:nfolds, times = ceiling(nrow(data)/nfolds)), size = nrow(data), replace = FALSE)
levelvec <- numeric()
for (i in 1:nfolds){
trainlevels <- data[fold_ids != i, ]$pidnum
testlevels <- data[fold_ids == i, ]$pidnum
levelvec[i] <- mean(testlevels %in% trainlevels)
# print(levelvec)
if(levelvec[i] != 1){break}
}
}
print("done")
})
system.time({
j <- 0
# this block makes sure "traindat" contains every level
levelvec <- 0
while(mean(levelvec) != 1) {
j <- j + 1
print(j)
if(i %% 100 == 0){print(paste0("iteration: ", i))}
fold_ids <- sample(rep(1:nfolds, times = ceiling(nrow(data)/nfolds)), size = nrow(data), replace = FALSE)
levelvec <- numeric()
for (i in 1:nfolds){
trainlevels <- data[fold_ids != i, ]$pidnum
testlevels <- data[fold_ids == i, ]$pidnum
levelvec[i] <- mean(testlevels %in% trainlevels)
# print(levelvec)
if(levelvec[i] != 1){break}
}
}
print("done")
})
system.time({
j <- 0
# this block makes sure "traindat" contains every level
levelvec <- 0
while(mean(levelvec) != 1) {
j <- j + 1
if(i %% 1000 == 0){print(paste0("iteration: ", i))}
fold_ids <- sample(rep(1:nfolds, times = ceiling(nrow(data)/nfolds)), size = nrow(data), replace = FALSE)
levelvec <- numeric()
for (i in 1:nfolds){
trainlevels <- data[fold_ids != i, ]$pidnum
testlevels <- data[fold_ids == i, ]$pidnum
levelvec[i] <- mean(testlevels %in% trainlevels)
# print(levelvec)
if(levelvec[i] != 1){break}
}
}
print("done")
})
system.time({
j <- 0
# this block makes sure "traindat" contains every level
levelvec <- 0
while(mean(levelvec) != 1) {
j <- j + 1
if(j %% 1000 == 0){print(paste0("iteration: ", i))}
fold_ids <- sample(rep(1:nfolds, times = ceiling(nrow(data)/nfolds)), size = nrow(data), replace = FALSE)
levelvec <- numeric()
for (i in 1:nfolds){
trainlevels <- data[fold_ids != i, ]$pidnum
testlevels <- data[fold_ids == i, ]$pidnum
levelvec[i] <- mean(testlevels %in% trainlevels)
# print(levelvec)
if(levelvec[i] != 1){break}
}
}
print("done")
})
system.time({
j <- 0
# this block makes sure "traindat" contains every level
levelvec <- 0
while(mean(levelvec) != 1) {
j <- j + 1
if(j %% 1000 == 0){print(paste0("iteration: ", j))}
fold_ids <- sample(rep(1:nfolds, times = ceiling(nrow(data)/nfolds)), size = nrow(data), replace = FALSE)
levelvec <- numeric()
for (i in 1:nfolds){
trainlevels <- data[fold_ids != i, ]$pidnum
testlevels <- data[fold_ids == i, ]$pidnum
levelvec[i] <- mean(testlevels %in% trainlevels)
# print(levelvec)
if(levelvec[i] != 1){break}
}
}
print("done")
})
############# laad packages #############
library("tidyverse")
library("ggmap")
library("lattice")
library("geosphere")
############# lees data #############
Ezfiets2021 <- read.csv("D:/Users/david/Documents/G&E/EasyFiets_trips_2021.csv")
Ezfiets2022 <- read.csv("D:/Users/david/Documents/G&E/EasyFiets_trips_2022.csv")
Ezfiets <- rbind(Ezfiets2021, Ezfiets2022)
############# data cleanen #############
Ezfiets$imei <- as.factor(Ezfiets$imei)
levels(Ezfiets$imei) <- paste0("fiets_",1:length(unique(Ezfiets$imei)))
Ezfiets$start.time <- as.POSIXct(Ezfiets$start.time, format="%Y-%m-%d %H:%M:%S", tz="Europe/Berlin")
Ezfiets$end.time <- as.POSIXct(Ezfiets$end.time, format="%Y-%m-%d %H:%M:%S", tz="Europe/Berlin")
numbers <- regmatches(Ezfiets$start.location, gregexpr("[[:digit:]]+\\.*[[:digit:]]*", Ezfiets$start.location))
numbers <- as.numeric(unlist(numbers))
start.location.lat <- numbers[seq(from = 1, to = length(numbers), by = 2)]
start.location.long <- numbers[seq(from = 2, to = length(numbers), by = 2)]
numbers <- regmatches(Ezfiets$end.location, gregexpr("[[:digit:]]+\\.*[[:digit:]]*", Ezfiets$end.location))
numbers <- as.numeric(unlist(numbers))
end.location.lat <- numbers[seq(from = 1, to = length(numbers), by = 2)]
end.location.long <- numbers[seq(from = 2, to = length(numbers), by = 2)]
Ezfiets <- Ezfiets %>%
mutate(start.location.lat, start.location.long, .before = start.location) %>%
mutate(end.location.lat, end.location.long, .before = end.location) %>%
select(-start.location, - end.location) %>%
group_by(imei) %>%
arrange(start.time, .by_group = TRUE) %>%
ungroup()
Ezfiets <- Ezfiets %>%
mutate(start.location.lat, start.location.long, .before = start.location) %>%
mutate(end.location.lat, end.location.long, .before = end.location) %>%
select(-start.location, - end.location) %>%
group_by(imei) %>%
arrange(start.time, .by_group = TRUE) %>%
ungroup()
############# lees data #############
Ezfiets2021 <- read.csv("D:/Users/david/Documents/G&E/EasyFiets_trips_2021.csv")
Ezfiets2022 <- read.csv("D:/Users/david/Documents/G&E/EasyFiets_trips_2022.csv")
Ezfiets <- rbind(Ezfiets2021, Ezfiets2022)
############# data cleanen #############
Ezfiets$imei <- as.factor(Ezfiets$imei)
levels(Ezfiets$imei) <- paste0("fiets_",1:length(unique(Ezfiets$imei)))
Ezfiets$start.time <- as.POSIXct(Ezfiets$start.time, format="%Y-%m-%d %H:%M:%S", tz="Europe/Berlin")
Ezfiets$end.time <- as.POSIXct(Ezfiets$end.time, format="%Y-%m-%d %H:%M:%S", tz="Europe/Berlin")
numbers <- regmatches(Ezfiets$start.location, gregexpr("[[:digit:]]+\\.*[[:digit:]]*", Ezfiets$start.location))
numbers <- as.numeric(unlist(numbers))
start.location.lat <- numbers[seq(from = 1, to = length(numbers), by = 2)]
start.location.long <- numbers[seq(from = 2, to = length(numbers), by = 2)]
numbers <- regmatches(Ezfiets$end.location, gregexpr("[[:digit:]]+\\.*[[:digit:]]*", Ezfiets$end.location))
numbers <- as.numeric(unlist(numbers))
end.location.lat <- numbers[seq(from = 1, to = length(numbers), by = 2)]
end.location.long <- numbers[seq(from = 2, to = length(numbers), by = 2)]
Ezfiets <- Ezfiets %>%
mutate(start.location.lat, start.location.long, .before = start.location) %>%
mutate(end.location.lat, end.location.long, .before = end.location) %>%
select(-start.location, - end.location) %>%
group_by(imei) %>%
arrange(start.time, .by_group = TRUE) %>%
ungroup()
############# Verkeerde fietsen  #############
# zoals je hier ziet zijn er een aantal fietsen waar Leiden niet eens word bezocht.
for(fiets in paste0("fiets_",1:length(unique(Ezfiets$imei)))){
print(paste(fiets,sum(grepl('Leiden',Ezfiets[Ezfiets$imei == fiets,]$start.address))))
} # vieze code, bah!
# Hiermee kan je individuele fietsen bekijken
View(Ezfiets[Ezfiets$imei == "fiets_5",])
# hier halen we de fietsen uit andere steden er uit
EzfietsAnderefietsen <- Ezfiets
Ezfiets <- Ezfiets[(Ezfiets$imei != "fiets_2" &
Ezfiets$imei != "fiets_11" &
Ezfiets$imei != "fiets_19"),]
############# heatmaps #############
# GPS coordinaten
Leiden <- c(left = 4.456955, right = 4.521543, bottom = 52.145648, top = 52.171028)
Regio <- c(left = 4.24, bottom = 52.06,right = 4.623209, top = 52.290213)
#Regio_Amsterdam <- c(left = 4.095356, bottom = 51.999256,right = 5.124977, top = 52.441781)
NL <- c(left = 3.264, bottom = 49.9,right = 7.429, top = 53.5)
EzfietsLeiden = subset(Ezfiets, start.location.long < Leiden[2] &
start.location.long > Leiden[1] &
start.location.lat < Leiden[4] &
start.location.lat > Leiden[3])
EzfietsRegiozonderLeiden <- subset(Ezfiets, !(start.location.long < Leiden[2] &
start.location.long > Leiden[1] &
start.location.lat < Leiden[4] &
start.location.lat > Leiden[3]))
# Kasper zei dat er soms ook in de straat om de hoek word geparkeerd
# Hier moet ook nog het diamantplein uit
EZleidenzonderhaagweg = subset(EzfietsLeiden, !grepl('Haagweg',start.address))
# Heatmap Leiden
pdf("Heatmap_Leiden.pdf")
ggmap(get_stamenmap(bbox = Leiden, zoom = 15)) +
stat_density2d(
aes(x = start.location.long, y = start.location.lat, fill = pmin(5000,..level..), alpha =(..level..)^4),
bins = 30, data = EZleidenzonderhaagweg,
geom = "polygon") +
geom_point(data=EzfietsLeiden, aes(x = start.location.long, y = start.location.lat), shape=21, fill='forestgreen' ,alpha=0.4, size = 1)+
scale_fill_distiller(palette = "Spectral")
dev.off()
# Heatmap Nederland
pdf("Heatmap_Nederland.pdf")
ggmap(get_stamenmap(bbox = NL, zoom = 8, maptype = "toner-background")) +
geom_point(data=Ezfiets, aes(x = start.location.long, y = start.location.lat), shape=21, fill='forestgreen' ,alpha=0.5, size = 2)
# geom_circle(data = data_circles, aes(lon = x0, lat = y0, r = r, col = r))
dev.off()
ggmap(get_stamenmap(bbox = NL, zoom = 8, maptype = "toner-background")) +
geom_point(data=Ezfiets, aes(x = start.location.long, y = start.location.lat), shape=21, fill='forestgreen' ,alpha=0.5, size = 2)
start.location.long
start.location.lat
numbers <- regmatches(Ezfiets$start.location, gregexpr("[[:digit:]]+\\.*[[:digit:]]*", Ezfiets$start.location))
numbers <- as.numeric(unlist(numbers))
start.location.lat <- numbers[seq(from = 1, to = length(numbers), by = 2)]
start.location.long <- numbers[seq(from = 2, to = length(numbers), by = 2)]
# Heatmap Nederland
pdf("Heatmap_Nederland.pdf")
ggmap(get_stamenmap(bbox = NL, zoom = 8, maptype = "toner-background")) +
geom_point(data=Ezfiets, aes(x = start.location.long, y = start.location.lat), shape=21, fill='forestgreen' ,alpha=0.5, size = 2)
# geom_circle(data = data_circles, aes(lon = x0, lat = y0, r = r, col = r))
dev.off()
pdf("Heatmap_Nederland.pdf")
ggmap(get_stamenmap(bbox = NL, zoom = 12, maptype = "toner")) +
geom_point(data=Ezfiets, aes(x = start.location.long, y = start.location.lat), shape=21, fill='forestgreen' ,alpha=0.5, size = 2)
# geom_circle(data = data_circles, aes(lon = x0, lat = y0, r = r, col = r))
dev.off(
)
pdf("Heatmap_Nederland.pdf")
ggmap(get_stamenmap(bbox = NL, zoom = 10, maptype = "toner")) +
geom_point(data=Ezfiets, aes(x = start.location.long, y = start.location.lat), shape=21, fill='forestgreen' ,alpha=0.5, size = 2)
# geom_circle(data = data_circles, aes(lon = x0, lat = y0, r = r, col = r))
dev.off()
library("haven")
library("dbarts")
library("glmertree")
library("dplyr")
library("here")
library("multilevel")
library("tidyverse")
gendata_bay <- function(data, PPD, n_gen){
if(nrow(data) != ncol(PPD)){stop("Amount of observations in PPD is different from data")}
index_gen <- sample.int(n = nrow(data), size = n_gen, replace = TRUE)
x_gen <- data[index_gen,]
y_gen <- sapply(index_gen, function(i) sample(x = PPD[,i], size = 1))
# y_gen <- sapply(index_gen, function(i) sample(x = PPD[,i][PPD[,i] >= quantile(PPD[,i], probs = .40) & PPD[,i] <= quantile(PPD[,i], probs = .60)], size = 1))
return(cbind(x_gen, y_gen))
}
gendata_smr <- function(data, palt = 0.5, n_gen){
if(palt < 0 | palt > 1){stop("palt must be bound between between 0 and 1")}
index_gen <- sample.int(n = nrow(data), size = n_gen, replace = TRUE)
gen_data <- data[index_gen,]
if(palt != 0){
for(i in 1:nrow(gen_data)){
for(j in 1:ncol(gen_data)){
if(runif(1) <= palt){gen_data[i,j] <- sample(x = data[,j], size = 1)}
}
}
}
return(gen_data)
}
set.seed(42)
data = read_sav(file.path(here(),"Project David","Safety.sav"))
set.seed(42)
nfolds <- 10
nreps <- 10
ngensizes <- c(1,5,10)
palt <- c(0, 0.25, 0.5)
tel <- 0
use_weights <- FALSE
baygen <- TRUE
tree_size <- MSE <- as.data.frame(matrix(data = NA, nrow = nfolds*nreps, ncol = 2 + length(ngensizes)))
colnames(tree_size) <- colnames(MSE) <- c("GLMM_tree","Bart",paste0("BaBart_N*",ngensizes))
rownames(tree_size) <- rownames(MSE) <- paste0("rep",sort(rep(1:nreps, times = nfolds)),"_fold",rep(1:nfolds, times = nreps))
system.time(
# foreach(k = 1:nreps, .packages = (c("dbarts","glmertree"))) %dopar% {
for (k in 1:nreps){
# this block makes sure "traindat" contains every level
levelvec <- 0
while(mean(levelvec) != 1) {
fold_ids <- sample(rep(1:nfolds, times = ceiling(nrow(data)/nfolds)), size = nrow(data), replace = FALSE)
levelvec <- numeric()
for (i in 1:nfolds){
trainlevels <- data[fold_ids != i, ]$street
testlevels <- data[fold_ids == i, ]$street
levelvec[i] <- mean(testlevels %in% trainlevels)
print(levelvec)
if(levelvec[i] != 1){break}
}
}
for (i in 1:nfolds){
traindat <- data[fold_ids != i, ]
testdat <- data[fold_ids == i, ]
# Fit a regualar GLMM tree
glmtree <- lmertree(unsafe ~ 1 | (1|street) | age + sex + economic + crowded,
data = traindat)
pred_glmtree <- predict(glmtree, newdata = testdat)
MSE[(k-1)*10+i,1] <- mean((testdat$unsafe - pred_glmtree)^2)
tree_size[(k-1)*10+i,1] <- (length(glmtree$tree)-1)/2
# fit multilevel BART
Mbart <- rbart_vi(unsafe ~ age + sex + economic + crowded,
data = traindat, group.by = traindat$street,
test = testdat, group.by.test = testdat$street,
n.trees = 100, keepTrees = TRUE, combineChains = TRUE, seed = 42)
posterior <- Mbart$yhat.train
MSE[(k-1)*10+i,2] <- mean((testdat$unsafe - Mbart$yhat.test.mean)^2)
# fit BaBart GLMM trees with different sizes of Ngen
for(ngen in ngensizes){
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
if(use_weights){
babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
data = surr_mlbart,
weights = rep(1/ngen, times = nrow(surr_mlbart)))
}
else{
babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
data = surr_mlbart)
}
pred_babart <- predict(babart, newdata = testdat, allow.new.levels = TRUE)
MSE[(k-1)*10+i,2+match(ngen,ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
tree_size[(k-1)*10+i,2+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
}
tel <- tel + 1
print(paste0("[",round((tel)/(nreps*nfolds)*100),"%]"))
}
}
)
# save MSE as CSV
write.csv(x = MSE, file = paste("MSE","Safety",if(baygen){paste0("baygen[",paste(ngensizes, collapse = ","),"]")}else{paste0("smearing[",paste0(palt*100,"%", collapse = ","),"]")}, if(use_weights){"weighted"}, sep = "_"))
# save tree_size as CSV
write.csv(x = tree_size, file = paste("TreeSize","Safety",if(baygen){paste0("baygen[",paste(ngensizes, collapse = ","),"]")}else{paste0("smearing[",paste0(palt*100,"%", collapse = ","),"]")}, if(use_weights){"weighted"}, sep = "_"))
apply(X = MSE, MARGIN = 2, FUN = mean)
apply(X = MSE, MARGIN = 2, FUN = sd)
apply(X = tree_size, MARGIN = 2, FUN = mean)
apply(X = tree_size, MARGIN = 2, FUN = sd)
# MSE_long <- MSE %>% gather(key = "Method", value = "MSE")
# MSE_long$Method <- as.factor(MSE_long$Method)
par(mar = c(7.1, 4.1, 4.1, 2.1))
boxplot(MSE, horizontal = F, las = 2)
abline(h = median(MSE$Bart))
# tree_size_long <- tree_size %>% gather(key = "Method", value = "MSE")
# tree_size_long$Method <- as.factor(tree_size_long$Method)
par(mar = c(7.1, 4.1, 4.1, 2.1))
boxplot(tree_size, horizontal = F, las = 2)
abline(h = median(MSE$Bart))
