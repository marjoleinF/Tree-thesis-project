library("haven")
library("dbarts")
library("glmertree")
library("dplyr")
library("here")
library("multilevel")
library("tidyverse")
library("LongCART")
library("foreign")
gendata_bay <- function(data, PPD, n_gen){
if(nrow(data) != ncol(PPD)){stop("Amount of observations in PPD is different from data")}
index_gen <- sample.int(n = nrow(data), size = n_gen, replace = TRUE)
x_gen <- data[index_gen,]
y_gen <- sapply(index_gen, function(i) sample(x = PPD[,i], size = 1))
# y_gen <- sapply(index_gen, function(i) sample(x = PPD[,i][PPD[,i] >= quantile(PPD[,i], probs = .40) & PPD[,i] <= quantile(PPD[,i], probs = .60)], size = 1))
return(cbind(x_gen, y_gen))
}
gendata_smr <- function(data, palt = 0.5, n_gen){
if(palt < 0 | palt > 1){stop("palt must be bound between between 0 and 1")}
index_gen <- sample.int(n = nrow(data), size = n_gen, replace = TRUE)
gen_data <- data[index_gen,]
if(palt != 0){
for(i in 1:nrow(gen_data)){
for(j in 1:ncol(gen_data)){
if(runif(1) <= palt){gen_data[i,j] <- sample(x = data[,j], size = 1)}
}
}
}
return(gen_data)
}
GAF <- read.spss("PP5_ITT_manova_v10_observed_MLwiN_GAF_ED20120314.sav",
to.data.frame = TRUE)
set.seed(42)
GAF[GAF == -9999] <- NA
GAF$dem1[GAF$dem1 == "-9999"] <- NA
GAF <- GAF[!is.na(GAF$GAF), ]
#sapply(GAF, function(x) table(is.na(x)))
vars <- c("nummer", "time", "GAF", "loc", "ptherapeut", "RAND2", "leeftijd",
"sexe", "dem1", "dem2", "dem3", "dem4", "dem5", "dem6", "dem6A",
"dem7", "dem8", "dem9", "dem10", "midy13b", "HDRSabove24")
GAF <- GAF[ , vars]
GAF <- GAF[complete.cases(GAF),]
GAF$time <- factor(GAF$time)
levels(GAF$time) <- gsub("gaf_", "", levels(GAF$time))
GAF$time <- as.numeric(as.character(GAF$time))
GAF[ , sapply(GAF, is.factor)] <- lapply(GAF[ , sapply(GAF, is.factor)], factor)
GAF$nummer <- factor(GAF$nummer)
#summary(GAF)
data <- GAF[GAF$nummer %in% sample(x = unique(GAF$nummer), size = 155),]
sapply(data, class)
rm(GAF)
sapply(data, class)
set.seed(42)
nfolds <- 10
nreps <- 10
ngensizes <- c(1,5, 10)
palts <- c(0.25, 0.5)
tel <- 0
use_weights <- T
baygen <- TRUE
if(baygen){
tree_size <- MSE <- as.data.frame(matrix(data = NA, nrow = nfolds*nreps, ncol = 2 + length(ngensizes)))
colnames(tree_size) <- colnames(MSE) <- c("GLMM_tree","Bart",paste0("BaBart_N*",ngensizes))
rownames(tree_size) <- rownames(MSE) <- paste0("rep",sort(rep(1:nreps, times = nfolds)),"_fold",rep(1:nfolds, times = nreps))
}else{
tree_size <- MSE <- as.data.frame(matrix(data = NA, nrow = nfolds*nreps, ncol = length(ngensizes)*length(palts)))
colnames(tree_size) <- colnames(MSE) <- c(paste0("Smearing_N*",expand.grid(ngensizes,palts)[,1], "_palt=",expand.grid(ngensizes,palts)[,2]))
rownames(tree_size) <- rownames(MSE) <- paste0("rep",sort(rep(1:nreps, times = nfolds)),"_fold",rep(1:nfolds, times = nreps))
}
# unique_test_ids <- list()
system.time(
for (k in 1:nreps){
# this block makes sure "traindat" contains every level
levelvec <- 0
while(mean(levelvec) != 1) {
fold_ids <- sample(rep(1:nfolds, times = ceiling(nrow(data)/nfolds)), size = nrow(data), replace = FALSE)
levelvec <- numeric()
for (i in 1:nfolds){
# same as CHILDID but for RACE
if(min(table(data[fold_ids != i, ]$ptherapeut)) < 1){
levelvec <- 0
print("stout!")
break}
trainlevels <- data[fold_ids != i, ]$nummer
testlevels <- data[fold_ids == i, ]$nummer
levelvec[i] <- mean(testlevels %in% trainlevels)
print(levelvec)
if(levelvec[i] != 1){break}
}
}
for (i in 1:nfolds){
traindat <- data[fold_ids != i, ]
testdat <- data[fold_ids == i, ]
# ## check if all ids in testset are present in training set
# unique_test_ids[[i]] <- unique(testdat$nummer[!testdat$nummer %in% traindat$nummer])
# ## if not, move random row of unique test ids in from training to test sample
# if (length(unique_test_ids[[i]]) > 0) {
#  for (j in unique_test_ids[[i]]) {
#     ids <- which(testdat$nummer == j)
#     id <- sample(ids, 1L)
#     traindat <- rbind(traindat, testdat[id, ])
#     testdat <- testdat[-id, ]
#  }
# }
if(baygen){
# Fit a regualar GLMM tree
glmtree <- lmertree(GAF ~ time | (1 | ptherapeut/nummer) | RAND2 +
leeftijd + sexe + dem1 + dem2 + dem3 + dem4 + dem5 +
dem6 + dem6A + dem7 + dem8 + dem9 + dem10 +
midy13b + HDRSabove24,
data = data, cluster = nummer)
pred_glmtree <- predict(glmtree, newdata = testdat, allow.new.levels = TRUE)
MSE[(k-1)*10+i,1] <- mean((testdat$GAF - pred_glmtree)^2)
tree_size[(k-1)*10+i,1] <- (length(glmtree$tree)-1)/2
# fit multilevel BART
Mbart <- rbart_vi(GAF ~ RAND2 + leeftijd +
sexe + dem1 + dem2 + dem3 + dem4 + dem5 + dem6 +
dem6A + dem7 + dem8 + dem9 + dem10 + midy13b +
HDRSabove24 + time + ptherapeut,
data = traindat, group.by = traindat$nummer,
test = testdat, group.by.test = testdat$nummer,
n.trees = 100, keepTrees = TRUE, combineChains = TRUE,
seed = 42)
posterior <- Mbart$yhat.train
MSE[(k-1)*10+i,2] <- mean((testdat$GAF - Mbart$yhat.test.mean)^2)
}
# fit BaBart GLMM trees with different sizes of Ngen
for(ngen in ngensizes){
if(baygen){
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
if(use_weights){
babart <- lmertree(y_gen ~ time | (1 | ptherapeut/nummer) | RAND2 +
leeftijd + sexe + dem1 + dem2 + dem3 + dem4 +
dem5 + dem6 + dem6A + dem7 + dem8 + dem9 +
dem10 + midy13b + HDRSabove24,
cluster = nummer, data = surr_mlbart,
weights = rep(1/ngen, times = nrow(surr_mlbart)))
}
else{
babart <- lmertree(y_gen ~ time | (1 | ptherapeut/nummer) | RAND2 +
leeftijd + sexe + dem1 + dem2 + dem3 + dem4 +
dem5 + dem6 + dem6A + dem7 + dem8 + dem9 +
dem10 + midy13b + HDRSabove24,
cluster = nummer, data = surr_mlbart)
}
pred_babart <- predict(babart, newdata = testdat, allow.new.levels = TRUE)
MSE[(k-1)*10+i,2+match(ngen,ngensizes)] <- mean((testdat$GAF - pred_babart)^2)
tree_size[(k-1)*10+i,2+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
}
else{
for(palt in palts){
surr_mlbart <- gendata_smr(traindat, palt, ngen * nrow(traindat))
Mbart <- rbart_vi(GAF ~ RAND2 +
leeftijd + sexe + dem1 + dem2 + dem3 + dem4 +
dem5 + dem6 + dem6A + dem7 + dem8 + dem9 + dem10 +
midy13b + HDRSabove24 + time + ptherapeut,
data = surr_mlbart, group.by = surr_mlbart$GAF,
n.trees = 100, keepTrees = TRUE, combineChains = TRUE,
seed = 42)
y_gen <- Mbart$yhat.train.mean
surr_mlbart <- cbind(surr_mlbart, y_gen)
if(use_weights){
babart <- lmertree(y_gen ~ time | (1 | ptherapeut/nummer) | RAND2 +
leeftijd + sexe + dem1 + dem2 + dem3 + dem4 +
dem5 + dem6 + dem6A + dem7 + dem8 + dem9 +
dem10 + midy13b + HDRSabove24,
cluster = nummer, data = surr_mlbart,
weights = rep(1/ngen, times = nrow(surr_mlbart)))
}
else{
babart <- lmertree(y_gen ~ time | (1 | ptherapeut/nummer) | RAND2 +
leeftijd + sexe + dem1 + dem2 + dem3 + dem4 +
dem5 + dem6 + dem6A + dem7 + dem8 + dem9 +
dem10 + midy13b + HDRSabove24,
cluster = nummer, data = surr_mlbart)
}
pred_babart <- predict(babart, newdata = testdat, allow.new.levels = TRUE)
MSE[(k-1)*10+i,match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- mean((testdat$GAF - pred_babart)^2)
tree_size[(k-1)*10+i,match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- (length(babart$tree)-1)/2
}
}
}
tel <- tel + 1
print(paste0("[",round((tel)/(nreps*nfolds)*100),"%]"))
}
}
)
table(data[fold_ids != i, ]$ptherapeut)
table(data[fold_ids != -i, ]$ptherapeut)
table(data[fold_ids == i, ]$ptherapeut)
table(data[fold_ids != i, ]$ptherapeut)
# this block makes sure "traindat" contains every level
levelvec <- 0
while(mean(levelvec) != 1) {
fold_ids <- sample(rep(1:nfolds, times = ceiling(nrow(data)/nfolds)), size = nrow(data), replace = FALSE)
levelvec <- numeric()
for (i in 1:nfolds){
# same as CHILDID but for RACE
if(min(table(data[fold_ids != i, ]$ptherapeut)) < 1){
levelvec <- 0
print("stout!")
break}
trainlevels <- data[fold_ids != i, ]$nummer
testlevels <- data[fold_ids == i, ]$nummer
levelvec[i] <- mean(testlevels %in% trainlevels)
print(levelvec)
if(levelvec[i] != 1){break}
}
}
set.seed(42)
nfolds <- 10
nreps <- 10
ngensizes <- c(1,5, 10)
palts <- c(0.25, 0.5)
tel <- 0
use_weights <- T
baygen <- TRUE
if(baygen){
tree_size <- MSE <- as.data.frame(matrix(data = NA, nrow = nfolds*nreps, ncol = 2 + length(ngensizes)))
colnames(tree_size) <- colnames(MSE) <- c("GLMM_tree","Bart",paste0("BaBart_N*",ngensizes))
rownames(tree_size) <- rownames(MSE) <- paste0("rep",sort(rep(1:nreps, times = nfolds)),"_fold",rep(1:nfolds, times = nreps))
}else{
tree_size <- MSE <- as.data.frame(matrix(data = NA, nrow = nfolds*nreps, ncol = length(ngensizes)*length(palts)))
colnames(tree_size) <- colnames(MSE) <- c(paste0("Smearing_N*",expand.grid(ngensizes,palts)[,1], "_palt=",expand.grid(ngensizes,palts)[,2]))
rownames(tree_size) <- rownames(MSE) <- paste0("rep",sort(rep(1:nreps, times = nfolds)),"_fold",rep(1:nfolds, times = nreps))
}
unique_test_ids <- list()
system.time(
for (k in 1:nreps){
fold_ids <- sample(rep(1:nfolds, times = ceiling(nrow(data)/nfolds)), size = nrow(data), replace = FALSE)
for (i in 1:nfolds){
traindat <- data[fold_ids != i, ]
testdat <- data[fold_ids == i, ]
## check if all ids in testset are present in training set
unique_test_ids[[i]] <- unique(testdat$ptherapeut[!testdat$ptherapeut %in% traindat$ptherapeut])
## if not, move random row of unique test ids in from training to test sample
if (length(unique_test_ids[[i]]) > 0) {
for (j in unique_test_ids[[i]]) {
ids <- which(testdat$ptherapeut == j)
id <- sample(ids, 1L)
traindat <- rbind(traindat, testdat[id, ])
testdat <- testdat[-id, ]
}
}
if(baygen){
# Fit a regualar GLMM tree
glmtree <- lmertree(GAF ~ time | (1 | ptherapeut/nummer) | RAND2 +
leeftijd + sexe + dem1 + dem2 + dem3 + dem4 + dem5 +
dem6 + dem6A + dem7 + dem8 + dem9 + dem10 +
midy13b + HDRSabove24,
data = data, cluster = nummer)
pred_glmtree <- predict(glmtree, newdata = testdat, allow.new.levels = TRUE)
MSE[(k-1)*10+i,1] <- mean((testdat$GAF - pred_glmtree)^2)
tree_size[(k-1)*10+i,1] <- (length(glmtree$tree)-1)/2
# fit multilevel BART
Mbart <- rbart_vi(GAF ~ RAND2 + leeftijd +
sexe + dem1 + dem2 + dem3 + dem4 + dem5 + dem6 +
dem6A + dem7 + dem8 + dem9 + dem10 + midy13b +
HDRSabove24 + time + ptherapeut,
data = traindat, group.by = traindat$nummer,
test = testdat, group.by.test = testdat$nummer,
n.trees = 100, keepTrees = TRUE, combineChains = TRUE,
seed = 42)
posterior <- Mbart$yhat.train
MSE[(k-1)*10+i,2] <- mean((testdat$GAF - Mbart$yhat.test.mean)^2)
}
# fit BaBart GLMM trees with different sizes of Ngen
for(ngen in ngensizes){
if(baygen){
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
if(use_weights){
babart <- lmertree(y_gen ~ time | (1 | ptherapeut/nummer) | RAND2 +
leeftijd + sexe + dem1 + dem2 + dem3 + dem4 +
dem5 + dem6 + dem6A + dem7 + dem8 + dem9 +
dem10 + midy13b + HDRSabove24,
cluster = nummer, data = surr_mlbart,
weights = rep(1/ngen, times = nrow(surr_mlbart)))
}
else{
babart <- lmertree(y_gen ~ time | (1 | ptherapeut/nummer) | RAND2 +
leeftijd + sexe + dem1 + dem2 + dem3 + dem4 +
dem5 + dem6 + dem6A + dem7 + dem8 + dem9 +
dem10 + midy13b + HDRSabove24,
cluster = nummer, data = surr_mlbart)
}
pred_babart <- predict(babart, newdata = testdat, allow.new.levels = TRUE)
MSE[(k-1)*10+i,2+match(ngen,ngensizes)] <- mean((testdat$GAF - pred_babart)^2)
tree_size[(k-1)*10+i,2+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
}
else{
for(palt in palts){
surr_mlbart <- gendata_smr(traindat, palt, ngen * nrow(traindat))
Mbart <- rbart_vi(GAF ~ RAND2 +
leeftijd + sexe + dem1 + dem2 + dem3 + dem4 +
dem5 + dem6 + dem6A + dem7 + dem8 + dem9 + dem10 +
midy13b + HDRSabove24 + time + ptherapeut,
data = surr_mlbart, group.by = surr_mlbart$GAF,
n.trees = 100, keepTrees = TRUE, combineChains = TRUE,
seed = 42)
y_gen <- Mbart$yhat.train.mean
surr_mlbart <- cbind(surr_mlbart, y_gen)
if(use_weights){
babart <- lmertree(y_gen ~ time | (1 | ptherapeut/nummer) | RAND2 +
leeftijd + sexe + dem1 + dem2 + dem3 + dem4 +
dem5 + dem6 + dem6A + dem7 + dem8 + dem9 +
dem10 + midy13b + HDRSabove24,
cluster = nummer, data = surr_mlbart,
weights = rep(1/ngen, times = nrow(surr_mlbart)))
}
else{
babart <- lmertree(y_gen ~ time | (1 | ptherapeut/nummer) | RAND2 +
leeftijd + sexe + dem1 + dem2 + dem3 + dem4 +
dem5 + dem6 + dem6A + dem7 + dem8 + dem9 +
dem10 + midy13b + HDRSabove24,
cluster = nummer, data = surr_mlbart)
}
pred_babart <- predict(babart, newdata = testdat, allow.new.levels = TRUE)
MSE[(k-1)*10+i,match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- mean((testdat$GAF - pred_babart)^2)
tree_size[(k-1)*10+i,match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- (length(babart$tree)-1)/2
}
}
}
tel <- tel + 1
print(paste0("[",round((tel)/(nreps*nfolds)*100),"%]"))
}
}
)
unique(testdat$ptherapeut[!testdat$ptherapeut %in% traindat$ptherapeut])
testdat$ptherapeut %in% traindat$ptherapeut
unique(testdat$ptherapeut[!testdat$ptherapeut %in% traindat$ptherapeut])
testdat$ptherapeut
traindat$ptherapeut
!testdat$ptherapeut %in% traindat$ptherapeut
knitr::opts_chunk$set(echo = TRUE)
library("here")
library("tidyverse")
library("Hmisc")
library("ggpubr")
course <- "ECLSK_SCHOOL"
# Baysian + Weighted
MSE_schl_bay_w <- read.csv(file.path(here(),"Project David","ECLSK_School",paste0("MSE_",course,"_baygen[1,5,10]_weighted")), header = TRUE, row.names = 1)
TS_schl_bay_w <- read.csv(file.path(here(),"Project David","ECLSK_School",paste0("TreeSize_",course,"_baygen[1,5,10]_weighted")), header = TRUE, row.names = 1)
# Baysian + NOT Weighted
MSE_schl_bay <- read.csv(file.path(here(),"Project David","ECLSK_School",paste0("MSE_",course,"_baygen[1,5,10]_")), header = TRUE, row.names = 1)
TS_schl_bay <- read.csv(file.path(here(),"Project David","ECLSK_School",paste0("TreeSize_",course,"_baygen[1,5,10]_")), header = TRUE, row.names = 1)
# Smearing + weighted
MSE_schl_smr_w <- read.csv(file.path(here(),"Project David","ECLSK_School",paste0("MSE_",course,"_smearing[25%,50%]_weighted")), header = TRUE, row.names = 1)
course <- "ECLSK_SCHOOL"
# Baysian + Weighted
MSE_schl_bay_w <- read.csv(file.path(here(),"Project David","ECLSK_School",paste0("MSE_",course,"_baygen[1,5,10]_weighted")), header = TRUE, row.names = 1)
TS_schl_bay_w <- read.csv(file.path(here(),"Project David","ECLSK_School",paste0("TreeSize_",course,"_baygen[1,5,10]_weighted")), header = TRUE, row.names = 1)
# Baysian + NOT Weighted
MSE_schl_bay <- read.csv(file.path(here(),"Project David","ECLSK_School",paste0("MSE_",course,"_baygen[1,5,10]_")), header = TRUE, row.names = 1)
TS_schl_bay <- read.csv(file.path(here(),"Project David","ECLSK_School",paste0("TreeSize_",course,"_baygen[1,5,10]_")), header = TRUE, row.names = 1)
# # Smearing + weighted
# MSE_schl_smr_w <- read.csv(file.path(here(),"Project David","ECLSK_School",paste0("MSE_",course,"_smearing[25%,50%]_weighted")), header = TRUE, row.names = 1)
# TS_schl_smr_w <- read.csv(file.path(here(),"Project David","ECLSK_School",paste0("TreeSize_",course,"_smearing[25%,50%]_weighted")), header = TRUE, row.names = 1)
a <- MSE_schl_bay_w %>%
pivot_longer(cols = colnames(.), names_to = "Function", values_to = "MSE") %>%
ggplot(., aes(x = factor(Function, levels = colnames(MSE_schl_bay_w)), y = MSE)) +
geom_jitter() +
stat_summary(fun.data = mean_sdl, geom = "pointrange", color = "red") +
xlab("") +
labs(title = "Baysian + Weighted", subtitle = "MSE")
b <- TS_schl_bay_w %>%
pivot_longer(cols = colnames(.), names_to = "Function", values_to = "Tree_Size") %>%
ggplot(., aes(x = factor(Function, levels = colnames(TS_schl_bay_w)), y = Tree_Size)) +
geom_jitter() +
stat_summary(fun.data = mean_sdl, geom = "pointrange", color = "red") +
xlab("") +
labs(title = "Baysian + Weighted", subtitle = "Tree Size")
c <- MSE_schl_bay %>%
pivot_longer(cols = colnames(.), names_to = "Function", values_to = "MSE") %>%
ggplot(., aes(x = factor(Function, levels = colnames(MSE_schl_bay)), y = MSE)) +
geom_jitter() +
stat_summary(fun.data = mean_sdl, geom = "pointrange", color = "red") +
xlab("") +
labs(title = "Baysian + NOT Weighted", subtitle = "MSE")
d <- TS_schl_bay %>%
pivot_longer(cols = colnames(.), names_to = "Function", values_to = "Tree_Size") %>%
ggplot(., aes(x = factor(Function, levels = colnames(TS_schl_bay)), y = Tree_Size)) +
geom_jitter() +
stat_summary(fun.data = mean_sdl, geom = "pointrange", color = "red") +
xlab("") +
labs(title = "Baysian + NOT Weighted", subtitle = "Tree Size")
# e <- MSE_schl_smr_w %>%
#   pivot_longer(cols = colnames(.), names_to = "Function", values_to = "MSE") %>%
#   ggplot(., aes(x = factor(Function, levels = colnames(MSE_schl_smr_w)), y = MSE)) +
#     geom_jitter() +
#     stat_summary(fun.data = mean_sdl, geom = "pointrange", color = "red") +
#     xlab("") +
#     labs(title = "Smearing + Weighted", subtitle = "MSE") +
#     theme(axis.text.x = element_text(angle = -25, vjust = 0.5, hjust=0.5))
#
# f <- TS_schl_smr_w %>%
#   pivot_longer(cols = colnames(.), names_to = "Function", values_to = "Tree_Size") %>%
#   ggplot(., aes(x = factor(Function, levels = colnames(TS_schl_smr_w)), y = Tree_Size)) +
#     geom_jitter() +
#     stat_summary(fun.data = mean_sdl, geom = "pointrange", color = "red") +
#     xlab("") +
#     labs(title = "Smearing + Weighted", subtitle = "Tree Size") +
#     theme(axis.text.x = element_text(angle = -25, vjust = 0.5, hjust=0.5))
tgrob <- text_grob(course,size = 20)
plot_0 <- as_ggplot(tgrob) + theme(plot.margin = margin(0,3,0,0, "cm"))
ggarrange(NULL,plot_0,NULL,a,c,e,b,d,f,
labels = c("","","","A", "B", "C", "D", "E", "F"),
ncol = 3, nrow = 3, heights = c(1,7,7))
ggarrange(a,b,c,d)
course <- "Math"
# Baysian + Weighted
MSE_mth_bay_w <- read.csv(file.path(here(),"Project David","ECLSK","math",paste0("MSE_",course,"_baygen[1,5,10]_weighted")), header = TRUE, row.names = 1)
TS_mth_bay_w <- read.csv(file.path(here(),"Project David","ECLSK","math",paste0("TreeSize_",course,"_baygen[1,5,10]_weighted")), header = TRUE, row.names = 1)
# Baysian + NOT Weighted
MSE_mth_bay <- read.csv(file.path(here(),"Project David","ECLSK","math",paste0("MSE_",course,"_baygen[1,5,10]_")), header = TRUE, row.names = 1)
TS_mth_bay <- read.csv(file.path(here(),"Project David","ECLSK","math",paste0("TreeSize_",course,"_baygen[1,5,10]_")), header = TRUE, row.names = 1)
# Smearing + weighted
MSE_mth_smr_w <- read.csv(file.path(here(),"Project David","ECLSK","math",paste0("MSE_",course,"_smearing[25%,50%]_weighted")), header = TRUE, row.names = 1)
TS_mth_smr_w <- read.csv(file.path(here(),"Project David","ECLSK","math",paste0("TreeSize_",course,"_smearing[25%,50%]_weighted")), header = TRUE, row.names = 1)
a <- MSE_mth_bay_w %>%
pivot_longer(cols = colnames(.), names_to = "Function", values_to = "MSE") %>%
ggplot(., aes(x = factor(Function, levels = colnames(MSE_mth_bay_w)), y = MSE)) +
geom_jitter() +
stat_summary(fun.data = mean_sdl, geom = "pointrange", color = "red") +
xlab("") +
labs(title = "Baysian + Weighted", subtitle = "MSE")
b <- TS_mth_bay_w %>%
pivot_longer(cols = colnames(.), names_to = "Function", values_to = "Tree_Size") %>%
ggplot(., aes(x = factor(Function, levels = colnames(TS_mth_bay_w)), y = Tree_Size)) +
geom_jitter() +
stat_summary(fun.data = mean_sdl, geom = "pointrange", color = "red") +
xlab("") +
labs(title = "Baysian + Weighted", subtitle = "Tree Size")
c <- MSE_mth_bay %>%
pivot_longer(cols = colnames(.), names_to = "Function", values_to = "MSE") %>%
ggplot(., aes(x = factor(Function, levels = colnames(MSE_mth_bay)), y = MSE)) +
geom_jitter() +
stat_summary(fun.data = mean_sdl, geom = "pointrange", color = "red") +
xlab("") +
labs(title = "Baysian + NOT Weighted", subtitle = "MSE")
d <- TS_mth_bay %>%
pivot_longer(cols = colnames(.), names_to = "Function", values_to = "Tree_Size") %>%
ggplot(., aes(x = factor(Function, levels = colnames(TS_mth_bay)), y = Tree_Size)) +
geom_jitter() +
stat_summary(fun.data = mean_sdl, geom = "pointrange", color = "red") +
xlab("") +
labs(title = "Baysian + NOT Weighted", subtitle = "Tree Size")
e <- MSE_mth_smr_w %>%
pivot_longer(cols = colnames(.), names_to = "Function", values_to = "MSE") %>%
ggplot(., aes(x = factor(Function, levels = colnames(MSE_mth_smr_w)), y = MSE)) +
geom_jitter() +
stat_summary(fun.data = mean_sdl, geom = "pointrange", color = "red") +
xlab("") +
labs(title = "Smearing + Weighted", subtitle = "MSE") +
theme(axis.text.x = element_text(angle = -25, vjust = 0.5, hjust=0.5))
f <- TS_mth_smr_w %>%
pivot_longer(cols = colnames(.), names_to = "Function", values_to = "Tree_Size") %>%
ggplot(., aes(x = factor(Function, levels = colnames(TS_mth_smr_w)), y = Tree_Size)) +
geom_jitter() +
stat_summary(fun.data = mean_sdl, geom = "pointrange", color = "red") +
xlab("") +
labs(title = "Smearing + Weighted", subtitle = "Tree Size") +
theme(axis.text.x = element_text(angle = -25, vjust = 0.5, hjust=0.5))
tgrob <- text_grob(course,size = 20)
plot_0 <- as_ggplot(tgrob) + theme(plot.margin = margin(0,3,0,0, "cm"))
ggarrange(NULL,plot_0,NULL,a,c,e,b,d,f,
labels = c("","","","A", "B", "C", "D", "E", "F"),
ncol = 3, nrow = 3, heights = c(1,7,7))
course <- "Science"
# Baysian + Weighted
MSE_sci_bay_w <- read.csv(file.path(here(),"Project David","ECLSK","science",paste0("MSE_",course,"_baygen[1,5,10]_weighted")), header = TRUE, row.names = 1)
course <- "Science"
# Baysian + Weighted
MSE_sci_bay_w <- read.csv(file.path(here(),"Project David","ECLSK","science",paste0("MSE_",course,"_baygen[1,5,10]_weighted")), header = TRUE, row.names = 1)
TS_sci_bay_w <- read.csv(file.path(here(),"Project David","ECLSK","science",paste0("TreeSize_",course,"_baygen[1,5,10]_weighted")), header = TRUE, row.names = 1)
# Baysian + NOT Weighted
MSE_sci_bay <- read.csv(file.path(here(),"Project David","ECLSK","science",paste0("MSE_",course,"_baygen[1,5,10]_")), header = TRUE, row.names = 1)
TS_sci_bay <- read.csv(file.path(here(),"Project David","ECLSK","science",paste0("TreeSize_",course,"_baygen[1,5,10]_")), header = TRUE, row.names = 1)
# Smearing + weighted
MSE_sci_smr_w <- read.csv(file.path(here(),"Project David","ECLSK","science",paste0("MSE_",course,"_smearing[25%,50%]_weighted")), header = TRUE, row.names = 1)
ggarrange(a,b,c,d)
Mbart <- rbart_vi(GAF ~ RAND2 + leeftijd +
sexe + dem1 + dem2 + dem3 + dem4 + dem5 + dem6 +
dem6A + dem7 + dem8 + dem9 + dem10 + midy13b +
HDRSabove24 + time + ptherapeut,
data = traindat, group.by = traindat$nummer,
test = testdat, group.by.test = testdat$nummer,
n.trees = 100, keepTrees = TRUE, combineChains = TRUE,
seed = 42)
Mbart <- rbart_vi(GAF ~ RAND2 + leeftijd +
sexe + dem1 + dem2 + dem3 + dem4 + dem5 + dem6 +
dem6A + dem7 + dem8 + dem9 + dem10 + midy13b +
HDRSabove24 + time + ptherapeut,
data = traindat, group.by = traindat$nummer,
n.trees = 100, keepTrees = TRUE, combineChains = TRUE,
seed = 42)
Mbart$yhat.test.mean
