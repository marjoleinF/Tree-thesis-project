#         axis.text=element_text(size=12),
#         legend.text=element_text(size=12),
#         legend.title=element_text(size=14,face="bold"),
#         plot.title=element_text(size=18,face="bold")) +
#   ggtitle("Relative MSE for every Dataset")
#
# ggplot(relMSElong, aes(x=MSE, y=Model, fill=Model)) +
#   geom_boxplot() +
#   labs(x = "MSE / min(MSE)") +
#   theme(legend.position = "none",
#         axis.title=element_text(size=14,face="bold"),
#         axis.text=element_text(size=12),
#         legend.text=element_text(size=12),
#         legend.title=element_text(size=14,face="bold"),
#         plot.title=element_text(size=18,face="bold")) +
#   ggtitle("Figure 4: Relative MSE combined")
# plot absolute MSE's
allMSElong <- melt(as.matrix(allMSE))
allMSElong$Var3 <- allMSElong$Var1
allMSElong$Var1 <- allMSElong$Var2
allMSElong$Var2 <- allMSElong$Var3
allMSElong$Var3 <- allMSElong$niks
colnames(allMSElong) <- c("Model", "Dataset", "MSE")
allMSElong$Dataset <- gsub("_MSE\\.[0-9]+", "", allMSElong$Dataset)
allMSElong$Dataset <- as.factor(allMSElong$Dataset)
# ggplot(allMSElong, aes(x=Model, y=MSE, fill=Model)) +
#     geom_boxplot() +
#     facet_wrap(~Dataset, scales = "free", nrow = 1) +
#   theme(axis.text.x=element_blank(),
#         axis.title=element_text(size=14,face="bold"),
#         axis.text=element_text(size=12),
#         legend.text=element_text(size=12),
#         legend.title=element_text(size=14,face="bold"),
#         plot.title=element_text(size=18,face="bold")) +
#   ggtitle("Figure 3: Absolute MSE for every dataset")
# plot absolte TreeSize
allTreeSizelong <- melt(as.matrix(allTreeSize))
allTreeSizelong$Var3 <- allTreeSizelong$Var1
allTreeSizelong$Var1 <- allTreeSizelong$Var2
allTreeSizelong$Var2 <- allTreeSizelong$Var3
allTreeSizelong$Var3 <- allTreeSizelong$niks
colnames(allTreeSizelong) <- c("Model", "Dataset", "Tree Size")
allTreeSizelong$Dataset <- gsub("_TreeSize\\.[0-9]+", "", allTreeSizelong$Dataset)
allTreeSizelong$Dataset <- as.factor(allTreeSizelong$Dataset)
# ggplot(allTreeSizelong, aes(x=`Tree Size`, y=Model, fill=Model)) +
#   geom_boxplot() +
#   theme(legend.position = "none",
#         axis.title=element_text(size=14,face="bold"),
#         axis.text=element_text(size=12),
#         legend.text=element_text(size=12),
#         legend.title=element_text(size=14,face="bold"),
#         plot.title=element_text(size=18,face="bold")) +
#   ggtitle("Figure 2: Tree Size combined")
ggplot(allTreeSizelong, aes(x=Model, y=`Tree Size`, fill=Model)) +
geom_boxplot() +
facet_wrap(~Dataset, scales = "free", nrow = 2) +
theme(axis.text.x=element_blank(),
axis.title=element_text(size=14,face="bold"),
axis.text=element_text(size=12),
legend.text=element_text(size=12),
legend.title=element_text(size=14,face="bold"),
legend.position = c(0.82,0.25),
plot.title=element_text(size=18,face="bold")) +
ggtitle("Figure 1: Tree Size for every dataset")
levels(allTreeSizelong$Model) <- c("GLMM tree", "PPD: N=1", "PPD: N=5", "PPD: N=10", "smearing: N=1, palt=0.00", "smearing: N=5, palt=0.00", "smearing: N=10, palt=0.00", "smearing: N=1, palt=0.25", "smearing: N=5, palt=0.25", "smearing: N=10, palt=0.25", "smearing: N=1, palt=0.50", "smearing: N=5, palt=0.50", "smearing: N=10, palt=0.50")
# # plot relative TreeSize
# relTreeSize <- apply(X = allTreeSize, MARGIN = 1, FUN = function(x){x/min(x)})
# relTreeSizelong <- melt(relTreeSize)
# colnames(relTreeSizelong) <- c("Model", "Dataset", "Tree Size")
# relTreeSizelong$Dataset <- gsub("_TreeSize\\.[0-9]+", "", relTreeSizelong$Dataset)
# relTreeSizelong$Dataset <- as.factor(relTreeSizelong$Dataset)
#
# ggplot(relTreeSizelong, aes(x=`Tree Size`, y=Model, fill=Model)) +
#   geom_boxplot() +
#   theme(legend.position = "none",
#         axis.title=element_text(size=14,face="bold"),
#         axis.text=element_text(size=12),
#         legend.text=element_text(size=12),
#         legend.title=element_text(size=14,face="bold"),
#         plot.title=element_text(size=18,face="bold")) +
#   ggtitle("Relative Tree Size combined")
#
# ggplot(relTreeSizelong, aes(x=Model, y=`Tree Size`, fill=Model)) +
#     geom_boxplot() +
#     facet_wrap(~Dataset, scales = "free", nrow = 1) +
#   theme(axis.text.x=element_blank(),
#         axis.title=element_text(size=14,face="bold"),
#         axis.text=element_text(size=12),
#         legend.text=element_text(size=12),
#         legend.title=element_text(size=14,face="bold"),
#         plot.title=element_text(size=18,face="bold")) +
#   ggtitle("Figure 1: Relative Tree Size for every dataset")
############ calculate variance for every dataset ############
### safety ###
set.seed(42)
data = read_sav(file.path(here(),"Project David","Safety.sav"))
var_safety <- var(data$unsafe)
### ACT ###
set.seed(42)
data(ACTG175)
## Remove missings
ACTG175 <- ACTG175[!is.na(ACTG175$cd4), ]
sapply(data, class)
## Correct coding of factors
ACTG175$pidnum <- factor(ACTG175$pidnum)
ACTG175$hemo <- factor(ACTG175$hemo)
ACTG175$homo <- factor(ACTG175$homo)
ACTG175$drugs <- factor(ACTG175$drugs)
ACTG175$oprior <- factor(ACTG175$oprior)
ACTG175$z30 <- factor(ACTG175$z30)
ACTG175$zprior <- factor(ACTG175$zprior)
ACTG175$race <- factor(ACTG175$race)
ACTG175$str2 <- factor(ACTG175$str2)
ACTG175$symptom <- factor(ACTG175$symptom)
ACTG175$treat <- factor(ACTG175$treat)
ACTG175$offtrt <- factor(ACTG175$offtrt)
data <- ACTG175[ACTG175$pidnum %in% sample(x = unique(ACTG175$pidnum), size = 377),]
rm(ACTG175)
var_ACT <- var(data$cd4)
### math ###
set.seed(42)
load(file.path(here(),"Project David","ECLSK","Math ability data.Rdata"))
data <- mathdata[mathdata$CHILDID %in% sample(x = unique(mathdata$CHILDID), size = 200),]
sapply(X = data, FUN = class)
table(data$RACE)
data$CHILDID <- factor(data$CHILDID)
rm(mathdata)
var_math <- var(data$score)
### reading ###
set.seed(42)
load(file.path(here(),"Project David","ECLSK","Reading ability data.Rdata"))
data <- readdata[readdata$CHILDID %in% sample(x = unique(readdata$CHILDID), size = 200),]
data$asmtmm <- factor(data$asmtmm)
data$CHILDID <- factor(data$CHILDID)
rm(readdata)
var_reading <- var(data$score)
### science ###
set.seed(42)
load(file.path(here(),"Project David","ECLSK","Science ability data.Rdata"))
data <- sciedata[sciedata$CHILDID %in% sample(x = unique(sciedata$CHILDID), size = 333),]
data$asmtmm <- as.factor(data$asmtmm)
rm(sciedata)
var_science <- var(data$score)
### school ###
set.seed(42)
load(file = "ECLSK_school.Rda")
Data <- Data %>%
group_by(school_ID) %>%
mutate(school_read = mean(as.numeric(child_read))) %>%
ungroup()
#Data <- Data[Data$school_ID %in% sort(unique(Data$school_ID))[table(Data$school_ID) >= 10],]
data <- Data[Data$school_ID %in% sample(x = unique(Data$school_ID), size = 146),]
data$school_ID <- factor(data$school_ID)
rm(Data)
data <- as.data.frame(data)
var_school <- var(data$child_readscore)
### marriage ###
set.seed(42)
load("practical6_surveydata.Rda")
data <- g
data <- na.omit(data)
data$marriage_01 <- as.numeric(data$marriage)
data$marriage <- factor(data$marriage)
data <- data[sample(x = 1:nrow(data), size = 1000 , replace = F),]
rm(g)
var_marriage <- var(data$marriage_01)
rm(data)
# add to long dataset
allMSElong$Variance <- NA
allMSElong$Variance[(allMSElong$Dataset == "ACT")] <- var_ACT
allMSElong$Variance[(allMSElong$Dataset == "ECLSKmath")] <- var_math
allMSElong$Variance[(allMSElong$Dataset == "ECLSKreading")] <- var_reading
allMSElong$Variance[(allMSElong$Dataset == "ECLSKschool")] <- var_school
allMSElong$Variance[(allMSElong$Dataset == "ECLSKscience")] <- var_science
allMSElong$Variance[(allMSElong$Dataset == "marriage")] <- var_marriage
allMSElong$Variance[(allMSElong$Dataset == "Safety")] <- var_safety
allMSElong$Rsquared <- 1 - allMSElong$MSE / allMSElong$Variance
levels(allMSElong$Model) <- c("GLMM tree","BART", "PPD: N=1", "PPD: N=5", "PPD: N=10", "smearing: N=1, palt=0.00", "smearing: N=5, palt=0.00", "smearing: N=10, palt=0.00", "smearing: N=1, palt=0.25", "smearing: N=5, palt=0.25", "smearing: N=10, palt=0.25", "smearing: N=1, palt=0.50", "smearing: N=5, palt=0.50", "smearing: N=10, palt=0.50")
# plot combined Rsquared
ggplot(allMSElong, aes(x=Rsquared, y=Model, fill=Model)) +
geom_boxplot() +
labs(x = "MSE / variance(y) a.k.a. Rsquared") +
theme(legend.position = "none",
axis.title=element_text(size=14,face="bold"),
axis.text=element_text(size=12),
legend.text=element_text(size=12),
legend.title=element_text(size=14,face="bold"),
plot.title=element_text(size=18,face="bold")) +
ggtitle(expression(R^2~" combined"))
ggplot(allMSElong, aes(x=Dataset, y=Rsquared, fill=Model)) +
geom_boxplot() +
facet_wrap(~Dataset, scales = "free_x", nrow = 2) +
theme(axis.title=element_text(size=14,face="bold"),
axis.text=element_text(size=12),
legend.text=element_text(size=12),
legend.title=element_text(size=14,face="bold"),
legend.position = c(0.82,0.25),
plot.title=element_text(size=18,face="bold")) +
ylab(expression(R^2)) +
ggtitle(expression(R^2~" for every dataset"))
ggplot(allMSElong[allMSElong$Dataset == "ACT",], aes(x=Rsquared, y=Model)) +
scale_y_discrete(limits = rev(levels(allMSElong$Model))) +
geom_violin() +
theme_apa() +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange") +
xlab(expression(R^2)) +
ggtitle("ACT")
ggplot(allMSElong[allMSElong$Dataset == "ECLSKschool",], aes(x=Rsquared, y=Model)) +
scale_y_discrete(limits = rev(levels(allMSElong$Model))) +
geom_violin() +
theme_apa() +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange") +
xlab(expression(R^2)) +
ggtitle("ECLSKschool")
ACTviolins <- ggplot(allMSElong[allMSElong$Dataset == "ACT",], aes(x=Rsquared, y=Model)) +
scale_y_discrete(limits = rev(levels(allMSElong$Model))) +
geom_violin() +
theme_apa() +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange") +
xlab(expression(R^2)) +
ggtitle("ACT")
schoolviolins <- ggplot(allMSElong[allMSElong$Dataset == "ECLSKschool",], aes(x=Rsquared, y=Model)) +
scale_y_discrete(limits = rev(levels(allMSElong$Model))) +
geom_violin() +
theme_apa() +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange") +
xlab(expression(R^2)) +
ggtitle("ECLSKschool")
ggarrange(ACTviolins, schoolviolins)
ggarrange(ACTviolins, schoolviolins, label.y = c(1,0))
ggarrange(ACTviolins, schoolviolins)
schoolviolins <- ggplot(allMSElong[allMSElong$Dataset == "ECLSKschool",], aes(x=Rsquared, y=Model)) +
scale_y_discrete(limits = rev(levels(allMSElong$Model))) +
geom_violin() +
theme(axis.text.y=element_blank()) +
theme_apa() +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange") +
xlab(expression(R^2)) +
ggtitle("ECLSKschool")
ggarrange(ACTviolins, schoolviolins)
schoolviolins
schoolviolins <- ggplot(allMSElong[allMSElong$Dataset == "ECLSKschool",], aes(x=Rsquared, y=Model)) +
scale_y_discrete(limits = rev(levels(allMSElong$Model))) +
geom_violin() +
theme(axis.text.y=element_blank()) +
theme_apa() +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange") +
xlab(expression(R^2)) +
ggtitle("ECLSKschool")
schoolviolins
element_blank()
schoolviolins <- ggplot(allMSElong[allMSElong$Dataset == "ECLSKschool",], aes(x=Rsquared, y=Model)) +
scale_y_discrete(limits = rev(levels(allMSElong$Model))) +
geom_violin() +
theme(axis.text.y = element_blank()) +
theme_apa() +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange") +
xlab(expression(R^2)) +
ggtitle("ECLSKschool")
schoolviolins
schoolviolins <- ggplot(allMSElong[allMSElong$Dataset == "ECLSKschool",], aes(x=Rsquared, y=Model)) +
scale_y_discrete(limits = rev(levels(allMSElong$Model))) +
geom_violin() +
theme_apa() +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange") +
xlab(expression(R^2)) +
ggtitle("ECLSKschool") +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
schoolviolins
schoolviolins <- ggplot(allMSElong[allMSElong$Dataset == "ECLSKschool",], aes(x=Rsquared, y=Model)) +
scale_y_discrete(limits = rev(levels(allMSElong$Model))) +
geom_violin() +
theme_apa() +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange") +
xlab(expression(R^2)) +
ggtitle("ECLSKschool") +
theme(axis.text.y=element_blank())
schoolviolins
ggarrange(ACTviolins, schoolviolins)
ACTvoilins + schoolviolins
ACTviolins + schoolviolins
schoolviolins <- ggplot(allMSElong[allMSElong$Dataset == "ECLSKschool",], aes(x=Rsquared, y=Model)) +
scale_y_discrete(limits = rev(levels(allMSElong$Model))) +
geom_violin(color = "grey") +
theme_apa() +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange") +
xlab(expression(R^2)) +
ggtitle("ECLSKschool") +
theme(axis.text.y=element_blank())
ACTviolins + schoolviolins
schoolviolins <- ggplot(allMSElong[allMSElong$Dataset == "ECLSKschool",], aes(x=Rsquared, y=Model)) +
scale_y_discrete(limits = rev(levels(allMSElong$Model))) +
geom_violin(fill = "grey") +
theme_apa() +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange") +
xlab(expression(R^2)) +
ggtitle("ECLSKschool") +
theme(axis.text.y=element_blank())
ACTviolins + schoolviolins
schoolviolins <- ggplot(allMSElong[allMSElong$Dataset == "ECLSKschool",], aes(x=Rsquared, y=Model)) +
scale_y_discrete(limits = rev(levels(allMSElong$Model))) +
geom_violin(fill = "grey88") +
theme_apa() +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange") +
xlab(expression(R^2)) +
ggtitle("ECLSKschool") +
theme(axis.text.y=element_blank())
ACTviolins + schoolviolins
schoolviolins <- ggplot(allMSElong[allMSElong$Dataset == "ECLSKschool",], aes(x=Rsquared, y=Model)) +
scale_y_discrete(limits = rev(levels(allMSElong$Model))) +
geom_violin(fill = "grey95") +
theme_apa() +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange") +
xlab(expression(R^2)) +
ggtitle("ECLSKschool") +
theme(axis.text.y=element_blank())
ACTviolins + schoolviolins
schoolviolins <- ggplot(allMSElong[allMSElong$Dataset == "ECLSKschool",], aes(x=Rsquared, y=Model)) +
scale_y_discrete(limits = rev(levels(allMSElong$Model))) +
geom_violin(fill = "grey91") +
theme_apa() +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange") +
xlab(expression(R^2)) +
ggtitle("ECLSKschool") +
theme(axis.text.y=element_blank())
ACTviolins + schoolviolins
schoolviolins <- ggplot(allMSElong[allMSElong$Dataset == "ECLSKschool",], aes(x=Rsquared, y=Model)) +
scale_y_discrete(limits = rev(levels(allMSElong$Model))) +
geom_violin(fill = "grey90") +
theme_apa() +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange") +
xlab(expression(R^2)) +
ggtitle("ECLSKschool") +
theme(axis.text.y=element_blank())
ACTviolins <- ggplot(allMSElong[allMSElong$Dataset == "ACT",], aes(x=Rsquared, y=Model)) +
scale_y_discrete(limits = rev(levels(allMSElong$Model))) +
geom_violin(fill = "grey90") +
theme_apa() +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange") +
xlab(expression(R^2)) +
ggtitle("ACT")
schoolviolins <- ggplot(allMSElong[allMSElong$Dataset == "ECLSKschool",], aes(x=Rsquared, y=Model)) +
scale_y_discrete(limits = rev(levels(allMSElong$Model))) +
geom_violin(fill = "grey90") +
theme_apa() +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange") +
xlab(expression(R^2)) +
ggtitle("ECLSKschool") +
theme(axis.text.y=element_blank())
ACTviolins + schoolviolins
fig2a <- Rsquaredplot_combined & # fig 2
geom_hline(yintercept = median(allRsquaredwide$`GLMM tree`), linetype = "dashed", color = "#0000CC") &
annotate("text", x = 0.6, y = median(allRsquaredwide$`GLMM tree`), label = "italic(`GLMM`)", vjust = 1.5, parse = TRUE, color = "#0000CC") &
geom_hline(yintercept = median(allRsquaredwide$BART), linetype = "dashed", color = "#FF0000") &
annotate("text", x = 0.6, y = median(allRsquaredwide$BART), label = "italic(`BART`)", vjust = -0.5, parse = TRUE, color = "#FF0000")
load("coolplots.Rdata")
plot_list
plot_list2
Rsquaredplot_grouped &
geom_hline(yintercept = median(allRsquaredwide$`GLMM tree`), linetype = "dashed", color = "#0000CC") &
annotate("text", x = 0.6, y = median(allRsquaredwide$`GLMM tree`), label = "italic(`GLMM`)", vjust = 1.5, parse = TRUE, color = "#0000CC") &
geom_hline(yintercept = median(allRsquaredwide$BART), linetype = "dashed", color = "#FF0000") &
annotate("text", x = 0.6, y = median(allRsquaredwide$BART), label = "italic(`BART`)", vjust = -0.5, parse = TRUE, color = "#FF0000")
########################## cool Rsq plots ----- N
allRsquaredwide <- allMSElong %>%
dplyr::mutate(fold = rep(1:100,98)) %>%
dplyr::select(Model, Dataset, Rsquared, fold) %>%
split(f = .$Dataset) %>%
map(~ (.) %>% pivot_wider(names_from = Model, values_from = Rsquared)) %>%
bind_rows()
load("coolplots.Rdata")
plot_list
plot_list2
Rsquaredplot_grouped &
geom_hline(yintercept = median(allRsquaredwide$`GLMM tree`), linetype = "dashed", color = "#0000CC") &
annotate("text", x = 0.6, y = median(allRsquaredwide$`GLMM tree`), label = "italic(`GLMM`)", vjust = 1.5, parse = TRUE, color = "#0000CC") &
geom_hline(yintercept = median(allRsquaredwide$BART), linetype = "dashed", color = "#FF0000") &
annotate("text", x = 0.6, y = median(allRsquaredwide$BART), label = "italic(`BART`)", vjust = -0.5, parse = TRUE, color = "#FF0000")
fig2a <- Rsquaredplot_combined & # fig 2
geom_hline(yintercept = median(allRsquaredwide$`GLMM tree`), linetype = "dashed", color = "#0000CC") &
annotate("text", x = 0.6, y = median(allRsquaredwide$`GLMM tree`), label = "italic(`GLMM`)", vjust = 1.5, parse = TRUE, color = "#0000CC") &
geom_hline(yintercept = median(allRsquaredwide$BART), linetype = "dashed", color = "#FF0000") &
annotate("text", x = 0.6, y = median(allRsquaredwide$BART), label = "italic(`BART`)", vjust = -0.5, parse = TRUE, color = "#FF0000")
fig2a
Rsquaredplot_grouped_palt &
geom_hline(yintercept = median(allRsquaredwide$`GLMM tree`), linetype = "dashed", color = "#0000CC") &
annotate("text", x = 0.6, y = median(allRsquaredwide$`GLMM tree`), label = "italic(`GLMM`)", vjust = 1.5, parse = TRUE, color = "#0000CC") &
geom_hline(yintercept = median(allRsquaredwide$BART), linetype = "dashed", color = "#FF0000") &
annotate("text", x = 0.6, y = median(allRsquaredwide$BART), label = "italic(`BART`)", vjust = -0.5, parse = TRUE, color = "#FF0000")
Rsquaredplot_combined_palt &
geom_hline(yintercept = median(allRsquaredwide$`GLMM tree`), linetype = "dashed", color = "#0000CC") &
annotate("text", x = 0.6, y = median(allRsquaredwide$`GLMM tree`), label = "italic(`GLMM`)", vjust = 1.5, parse = TRUE, color = "#0000CC") &
geom_hline(yintercept = median(allRsquaredwide$BART), linetype = "dashed", color = "#FF0000") &
annotate("text", x = 0.6, y = median(allRsquaredwide$BART), label = "italic(`BART`)", vjust = -0.5, parse = TRUE, color = "#FF0000")
treesizeplot_grouped &
geom_hline(yintercept = median(allTreeSize$GLMM_tree), linetype = "dashed", color = "#0000CC") &
annotate("text", x = 0.6, y = median(allTreeSize$GLMM_tree), label = "italic(`GLMM`)", vjust = -0.5, parse = TRUE, color = "#0000CC")
fig2b <- treesizeplot_combined & # fig 2
geom_hline(yintercept = median(allTreeSize$GLMM_tree), linetype = "dashed", color = "#0000CC") &
annotate("text", x = 0.6, y = median(allTreeSize$GLMM_tree), label = "italic(`GLMM`)", vjust = -0.5, parse = TRUE, color = "#0000CC")
fig2b
treesizeplot_grouped_palt &
geom_hline(yintercept = median(allTreeSize$GLMM_tree), linetype = "dashed", color = "#0000CC") &
annotate("text", x = 0.6, y = median(allTreeSize$GLMM_tree), label = "italic(`GLMM`)", vjust = -0.5, parse = TRUE, color = "#0000CC")
treesizeplot_combined_palt &
geom_hline(yintercept = median(allTreeSize$GLMM_tree), linetype = "dashed", color = "#0000CC") &
annotate("text", x = 0.6, y = median(allTreeSize$GLMM_tree), label = "italic(`GLMM`)", vjust = -0.5, parse = TRUE, color = "#0000CC")
fig2a + fig2b
fig3a <- Rsquaredplot_combined_palt & # fig 3
geom_hline(yintercept = median(allRsquaredwide$`GLMM tree`), linetype = "dashed", color = "#0000CC") &
annotate("text", x = 0.6, y = median(allRsquaredwide$`GLMM tree`), label = "italic(`GLMM`)", vjust = 1.5, parse = TRUE, color = "#0000CC") &
geom_hline(yintercept = median(allRsquaredwide$BART), linetype = "dashed", color = "#FF0000") &
annotate("text", x = 0.6, y = median(allRsquaredwide$BART), label = "italic(`BART`)", vjust = -0.5, parse = TRUE, color = "#FF0000")
fig3b <- treesizeplot_combined_palt & # fig 3
geom_hline(yintercept = median(allTreeSize$GLMM_tree), linetype = "dashed", color = "#0000CC") &
annotate("text", x = 0.6, y = median(allTreeSize$GLMM_tree), label = "italic(`GLMM`)", vjust = -0.5, parse = TRUE, color = "#0000CC")
fig3a + fig3b
plot_list
plot_list[["ACT"]] + plot_list[["ECLSKscience"]]
# statistical tests: Tukey
tukey_list <- Rsquared_best_total %>%
dplyr::select(-Rsquared.Mean, -Rsquared.SD) %>%
split(f = .$Dataset) %>%
map(~ (.) %>% dplyr::select(-Dataset) %>%
stats::reshape(varying = c(2:101), v.names = "Rsquared", idvar = "Model", timevar = "fold", direction = "long") %>%
rstatix::tukey_hsd(formula = Rsquared ~ Model) %>%
dplyr::mutate(contrast = paste0(.$group1,"---",.$group2),
contrast = str_split(contrast, "---"))
)
# data preperation T_T
{
# finds the highest Rsq for every dataset, and calculates mean.
Rsquared_best_means <- allMSElong %>%
dplyr::group_by(Model, Dataset) %>%
dplyr::mutate(Rsquared.Mean = mean(Rsquared), Rsquared.SD = sd(Rsquared)) %>%
dplyr::ungroup() %>%
dplyr::select(Model, Dataset, Rsquared.Mean, Rsquared.SD) %>%
dplyr::distinct() %>%
dplyr::mutate(dummy_Model = substr(Model, 1,3)) %>%
dplyr::group_by(Dataset, dummy_Model) %>%
dplyr::top_n(1, Rsquared.Mean) %>%
dplyr::ungroup() %>%
dplyr::select(Model, Dataset, Rsquared.Mean, Rsquared.SD) %>%
dplyr::arrange(Dataset)
# for every highest Rsq model, add every value of Rsq to the row
Rsquared_empty <- as.data.frame(matrix(NA, nrow = nrow(Rsquared_best_means), ncol = 100))
for(i in 1:nrow(Rsquared_best_means)){
tempRsquareds <- (allMSElong) %>%
dplyr::select(Model, Dataset, Rsquared) %>%
dplyr::filter(Model == as.character(sjlabelled::to_character(Rsquared_best_means[i,1])) & Dataset == as.character(to_character(Rsquared_best_means[i,2]))) %>%
dplyr::select(Rsquared) %>%
t() %>%
as_vector()
Rsquared_empty[i,] <- tempRsquareds
}
Rsquared_best_total <- cbind(Rsquared_best_means, Rsquared_empty)
}
# statistical tests: Tukey
tukey_list <- Rsquared_best_total %>%
dplyr::select(-Rsquared.Mean, -Rsquared.SD) %>%
split(f = .$Dataset) %>%
map(~ (.) %>% dplyr::select(-Dataset) %>%
stats::reshape(varying = c(2:101), v.names = "Rsquared", idvar = "Model", timevar = "fold", direction = "long") %>%
rstatix::tukey_hsd(formula = Rsquared ~ Model) %>%
dplyr::mutate(contrast = paste0(.$group1,"---",.$group2),
contrast = str_split(contrast, "---"))
)
tukey_list
tukey_list[[1]]
tukey_list[["ECLSKscience"]]
load("coolplots.Rdata")
plot_list
plot_list2
Rsquaredplot_grouped &
geom_hline(yintercept = median(allRsquaredwide$`GLMM tree`), linetype = "dashed", color = "#0000CC") &
annotate("text", x = 0.6, y = median(allRsquaredwide$`GLMM tree`), label = "italic(`GLMM`)", vjust = 1.5, parse = TRUE, color = "#0000CC") &
geom_hline(yintercept = median(allRsquaredwide$BART), linetype = "dashed", color = "#FF0000") &
annotate("text", x = 0.6, y = median(allRsquaredwide$BART), label = "italic(`BART`)", vjust = -0.5, parse = TRUE, color = "#FF0000")
fig2a <- Rsquaredplot_combined & # fig 2
geom_hline(yintercept = median(allRsquaredwide$`GLMM tree`), linetype = "dashed", color = "#0000CC") &
annotate("text", x = 0.6, y = median(allRsquaredwide$`GLMM tree`), label = "italic(`GLMM`)", vjust = 1.5, parse = TRUE, color = "#0000CC") &
geom_hline(yintercept = median(allRsquaredwide$BART), linetype = "dashed", color = "#FF0000") &
annotate("text", x = 0.6, y = median(allRsquaredwide$BART), label = "italic(`BART`)", vjust = -0.5, parse = TRUE, color = "#FF0000")
fig2a
Rsquaredplot_grouped_palt &
geom_hline(yintercept = median(allRsquaredwide$`GLMM tree`), linetype = "dashed", color = "#0000CC") &
annotate("text", x = 0.6, y = median(allRsquaredwide$`GLMM tree`), label = "italic(`GLMM`)", vjust = 1.5, parse = TRUE, color = "#0000CC") &
geom_hline(yintercept = median(allRsquaredwide$BART), linetype = "dashed", color = "#FF0000") &
annotate("text", x = 0.6, y = median(allRsquaredwide$BART), label = "italic(`BART`)", vjust = -0.5, parse = TRUE, color = "#FF0000")
fig3a <- Rsquaredplot_combined_palt & # fig 3
geom_hline(yintercept = median(allRsquaredwide$`GLMM tree`), linetype = "dashed", color = "#0000CC") &
annotate("text", x = 0.6, y = median(allRsquaredwide$`GLMM tree`), label = "italic(`GLMM`)", vjust = 1.5, parse = TRUE, color = "#0000CC") &
geom_hline(yintercept = median(allRsquaredwide$BART), linetype = "dashed", color = "#FF0000") &
annotate("text", x = 0.6, y = median(allRsquaredwide$BART), label = "italic(`BART`)", vjust = -0.5, parse = TRUE, color = "#FF0000")
fig3a
treesizeplot_grouped &
geom_hline(yintercept = median(allTreeSize$GLMM_tree), linetype = "dashed", color = "#0000CC") &
annotate("text", x = 0.6, y = median(allTreeSize$GLMM_tree), label = "italic(`GLMM`)", vjust = -0.5, parse = TRUE, color = "#0000CC")
fig2b <- treesizeplot_combined & # fig 2
geom_hline(yintercept = median(allTreeSize$GLMM_tree), linetype = "dashed", color = "#0000CC") &
annotate("text", x = 0.6, y = median(allTreeSize$GLMM_tree), label = "italic(`GLMM`)", vjust = -0.5, parse = TRUE, color = "#0000CC")
fig2b
treesizeplot_grouped_palt &
geom_hline(yintercept = median(allTreeSize$GLMM_tree), linetype = "dashed", color = "#0000CC") &
annotate("text", x = 0.6, y = median(allTreeSize$GLMM_tree), label = "italic(`GLMM`)", vjust = -0.5, parse = TRUE, color = "#0000CC")
fig3b <- treesizeplot_combined_palt & # fig 3
geom_hline(yintercept = median(allTreeSize$GLMM_tree), linetype = "dashed", color = "#0000CC") &
annotate("text", x = 0.6, y = median(allTreeSize$GLMM_tree), label = "italic(`GLMM`)", vjust = -0.5, parse = TRUE, color = "#0000CC")
fig3b
