library("here")
library("tidyverse")
library("Hmisc")
library("ggpubr")
course <- "Safety"
# Baysian + Weighted
MSE_saf_bay_w <- read.csv(file.path(here(),"Project David","safety",paste0("MSE_",course,"_baygen[1,5,10]_weighted")), header = TRUE, row.names = 1)
TS_saf_bay_w <- read.csv(file.path(here(),"Project David","safety",paste0("TreeSize_",course,"_baygen[1,5,10]_weighted")), header = TRUE, row.names = 1)
# Baysian + NOT Weighted
MSE_saf_bay <- read.csv(file.path(here(),"Project David","safety",paste0("MSE_",course,"_baygen[1,5,10]_")), header = TRUE, row.names = 1)
TS_saf_bay <- read.csv(file.path(here(),"Project David","safety",paste0("TreeSize_",course,"_baygen[1,5,10]_")), header = TRUE, row.names = 1)
# Smearing + weighted
MSE_saf_smr_w <- read.csv(file.path(here(),"Project David","safety",paste0("MSE_",course,"_smearing[25%,50%]_weighted")), header = TRUE, row.names = 1)
TS_saf_smr_w <- read.csv(file.path(here(),"Project David","safety",paste0("TreeSize_",course,"_smearing[25%,50%]_weighted")), header = TRUE, row.names = 1)
a <- MSE_saf_bay_w %>%
pivot_longer(cols = colnames(.), names_to = "Function", values_to = "MSE") %>%
ggplot(., aes(x = factor(Function, levels = colnames(MSE_saf_bay_w)), y = MSE)) +
geom_jitter() +
stat_summary(fun.data = mean_sdl, geom = "pointrange", color = "red") +
xlab("") +
labs(title = "Baysian + Weighted", subtitle = "MSE")
b <- TS_saf_bay_w %>%
pivot_longer(cols = colnames(.), names_to = "Function", values_to = "Tree_Size") %>%
ggplot(., aes(x = factor(Function, levels = colnames(TS_saf_bay_w)), y = Tree_Size)) +
geom_jitter() +
stat_summary(fun.data = mean_sdl, geom = "pointrange", color = "red") +
xlab("") +
labs(title = "Baysian + Weighted", subtitle = "Tree Size")
c <- MSE_saf_bay %>%
pivot_longer(cols = colnames(.), names_to = "Function", values_to = "MSE") %>%
ggplot(., aes(x = factor(Function, levels = colnames(MSE_saf_bay)), y = MSE)) +
geom_jitter() +
stat_summary(fun.data = mean_sdl, geom = "pointrange", color = "red") +
xlab("") +
labs(title = "Baysian + NOT Weighted", subtitle = "MSE")
d <- TS_saf_bay %>%
pivot_longer(cols = colnames(.), names_to = "Function", values_to = "Tree_Size") %>%
ggplot(., aes(x = factor(Function, levels = colnames(TS_saf_bay)), y = Tree_Size)) +
geom_jitter() +
stat_summary(fun.data = mean_sdl, geom = "pointrange", color = "red") +
xlab("") +
labs(title = "Baysian + NOT Weighted", subtitle = "Tree Size")
e <- MSE_saf_smr_w %>%
pivot_longer(cols = colnames(.), names_to = "Function", values_to = "MSE") %>%
ggplot(., aes(x = factor(Function, levels = colnames(MSE_saf_smr_w)), y = MSE)) +
geom_jitter() +
stat_summary(fun.data = mean_sdl, geom = "pointrange", color = "red") +
xlab("") +
labs(title = "Smearing + Weighted", subtitle = "MSE") +
theme(axis.text.x = element_text(angle = -25, vjust = 0.5, hjust=0.5))
f <- TS_saf_smr_w %>%
pivot_longer(cols = colnames(.), names_to = "Function", values_to = "Tree_Size") %>%
ggplot(., aes(x = factor(Function, levels = colnames(TS_saf_smr_w)), y = Tree_Size)) +
geom_jitter() +
stat_summary(fun.data = mean_sdl, geom = "pointrange", color = "red") +
xlab("") +
labs(title = "Smearing + Weighted", subtitle = "Tree Size") +
theme(axis.text.x = element_text(angle = -25, vjust = 0.5, hjust=0.5))
tgrob <- text_grob(course,size = 20)
plot_0 <- as_ggplot(tgrob) + theme(plot.margin = margin(0,3,0,0, "cm"))
ggarrange(NULL,plot_0,NULL,a,c,e,b,d,f,
labels = c("","","","A", "B", "C", "D", "E", "F"),
ncol = 3, nrow = 3, heights = c(1,7,7))
# # Weighted
# MSE_saf_bay_w <- read.csv(file.path(here(),"Project David","safety","MSE_Safety_baygen[1,5,10]_weighted"), header = TRUE, row.names = 1)
# TS_saf_bay_w <- read.csv(file.path(here(),"Project David","safety","TreeSize_Safety_baygen[1,5,10]_weighted"), header = TRUE, row.names = 1)
# # not weighted
# MSE_saf <- read.csv(file.path(here(),"Project David","safety","MSE_Safety_baygen[1,5,10]_"), header = TRUE, row.names = 1)
# TS_saf <- read.csv(file.path(here(),"Project David","safety","TreeSize_Safety_baygen[1,5,10]_"), header = TRUE, row.names = 1)
apply(X = MSE, MARGIN = 2, FUN = mean)
apply(X = MSE, MARGIN = 2, FUN = sd)
apply(X = tree_size, MARGIN = 2, FUN = mean)
apply(X = tree_size, MARGIN = 2, FUN = sd)
apply(X = MSE, MARGIN = 2, FUN = mean)
apply(X = MSE, MARGIN = 2, FUN = sd)
apply(X = tree_size, MARGIN = 2, FUN = mean)
apply(X = tree_size, MARGIN = 2, FUN = sd)
# MSE_long <- MSE %>% gather(key = "Method", value = "MSE")
# MSE_long$Method <- as.factor(MSE_long$Method)
par(mar = c(7.1, 4.1, 4.1, 2.1))
boxplot(MSE, horizontal = F, las = 2)
abline(h = median(MSE$Bart))
# tree_size_long <- tree_size %>% gather(key = "Method", value = "MSE")
# tree_size_long$Method <- as.factor(tree_size_long$Method)
par(mar = c(7.1, 4.1, 4.1, 2.1))
boxplot(tree_size, horizontal = F, las = 2)
abline(h = median(MSE$Bart))
# save MSE as CSV
write.csv(x = MSE, file = paste("MSE","Safety",if(baygen){paste0("baygen[",paste(ngensizes, collapse = ","),"]")}else{paste0("smearing[",paste0(palts*100,"%", collapse = ","),"]")}, if(use_weights){"weighted"}, sep = "_"))
write.csv(x = MSE, file = "Safety_MSE")
write.csv(x = tree_size, file = "Safety_TreeSize")
write.csv(x = MSE, file = "Safety_MSE.txt")
write.csv(x = tree_size, file = "Safety_TreeSize.txt")
set.seed(42)
data(ACTG175)
## Remove missings
ACTG175 <- ACTG175[!is.na(ACTG175$cd4), ]
sapply(data, class)
## Correct coding of factors
ACTG175$pidnum <- factor(ACTG175$pidnum)
ACTG175$hemo <- factor(ACTG175$hemo)
ACTG175$homo <- factor(ACTG175$homo)
ACTG175$drugs <- factor(ACTG175$drugs)
ACTG175$oprior <- factor(ACTG175$oprior)
ACTG175$z30 <- factor(ACTG175$z30)
ACTG175$zprior <- factor(ACTG175$zprior)
ACTG175$race <- factor(ACTG175$race)
ACTG175$str2 <- factor(ACTG175$str2)
ACTG175$symptom <- factor(ACTG175$symptom)
ACTG175$treat <- factor(ACTG175$treat)
ACTG175$offtrt <- factor(ACTG175$offtrt)
data <- ACTG175[ACTG175$pidnum %in% sample(x = unique(ACTG175$pidnum), size = 377),]
rm(ACTG175)
# ## Create objects for saving results
tree_size <- MSE <- as.data.frame(matrix(data = NA,
nrow = nfolds*nreps,
ncol = 3 +
length(ngensizes) +
nrow(BaSmear_design) +
length(ngensizes[ngensizes != 1]) +
nrow(BaSmear_design[!(BaSmear_design[,1] %in% 1),])))
colnames(tree_size) <- colnames(MSE) <- c("GLMM_tree", "Bart", "BA",
paste0("BaBart_N*",ngensizes),
paste0("Smearing_N*",BaSmear_design[,1], "_palt=",BaSmear_design[,2]),
paste0("BaBart_N*", ngensizes[ngensizes != 1], "_Nw"),
paste0("Smearing_N*",BaSmear_design[!(BaSmear_design[,1] %in% 1),][,1], "_palt=",
BaSmear_design[!(BaSmear_design[,1] %in% 1),][,2], "_Nw"))
tel <- 0
system.time(
for (k in 1:nreps){
# Generate train-test splits
fold_ids <- sample(rep(1:nfolds, times = ceiling(nrow(data)/nfolds)),
size = nrow(data), replace = FALSE)
for (i in 1:nfolds){
# train-test split
traindat <- data[fold_ids != i, ]
testdat <- data[fold_ids == i, ]
# Check whether all factor levels in test are also in train, else omit from test
for (fact in c("pidnum")) {
levs <- unique(testdat[ , fact]) %in% unique(traindat[ , fact])
if (!all(levs)) {
traindat <- rbind(traindat, testdat[which(!testdat[ , fact] %in% unique(testdat[ , fact])[levs]), ])
testdat <- testdat[-which(!testdat[ , fact] %in% unique(testdat[ , fact])[levs]), ]
print(paste0("Levels of fold ", i, " omitted from test data: ",
unique(testdat[ , fact])[!levs]))
}
}
###### Fit a regualar GLMM tree ######
glmtree <- lmertree(cd4 ~ time | (1 | pidnum) | gender + wtkg + hemo + homo +
drugs + karnof + oprior + z30 + zprior + race + str2 +
symptom + treat + offtrt,
data = traindat, cluster = pidnum)
pred_glmtree <- predict(glmtree, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,1] <- mean((testdat$cd4 - pred_glmtree)^2)
tree_size[(k-1)*10+i,1] <- (length(glmtree$tree)-1)/2
######  fit multilevel BART ######
Mbart <- rbart_vi(cd4 ~ time + gender + wtkg + hemo + homo + drugs +
karnof + oprior + z30 + zprior + race + str2 +
symptom + treat + offtrt,
data = traindat, group.by = traindat$pidnum,
test = testdat, group.by.test = testdat$pidnum,
combineChains = TRUE, seed = 42)
posterior <- Mbart$yhat.train
MSE[(k-1)*10+i,2] <- mean((testdat$cd4 - Mbart$yhat.test.mean)^2)
# fit BaBart GLMM trees with different sizes of Ngen using Baygen and smearing
for(ngen in ngensizes){
# Bayesian data generation
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
###### Baygen Weighted ######
babart <- lmertree(y_gen ~ time | (1 | pidnum) | gender + wtkg + hemo +
homo + drugs + karnof + oprior + z30 + zprior +
race + str2 + symptom + treat + offtrt,
cluster = pidnum, data = surr_mlbart,
weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,3+match(ngen,ngensizes)] <- mean((testdat$cd4 - pred_babart)^2)
tree_size[(k-1)*10+i,3+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
###### Baygen NOT Weighted ######
if(ngen != 1){
babart <- lmertree(y_gen ~ time | (1 | pidnum) | gender + wtkg + hemo +
homo + drugs + karnof + oprior + z30 + zprior +
race + str2 + symptom + treat + offtrt,
cluster = pidnum, data = surr_mlbart,
maxdepth = 5)
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,2+match(ngen,ngensizes)+length(ngensizes)+nrow(BaSmear_design)] <- mean((testdat$cd4 - pred_babart)^2)# :s
tree_size[(k-1)*10+i,2+match(ngen,ngensizes)+length(ngensizes)+nrow(BaSmear_design)] <- (length(babart$tree)-1)/2
}
# smearing HIER MOET DE CLUSTERSTRUCTUUR WORDEN BEHOUDEN
for(palt in palts){
surr_mlbart <- gendata_smr(as_tibble(traindat), palt, ngen * nrow(traindat), keeps = c("pidnum"))
Mbart <- rbart_vi(cd4 ~ time + gender + wtkg + hemo + homo + drugs +
karnof + oprior + z30 + zprior + race + str2 +
symptom + treat + offtrt,
data = surr_mlbart, group.by = surr_mlbart$pidnum,
combineChains = TRUE,
seed = 42)
y_gen <- Mbart$yhat.train.mean
surr_mlbart <- cbind(surr_mlbart, y_gen)
###### Smearing Weighted ######
babart <- lmertree(y_gen ~ time | (1 | pidnum) | gender + wtkg + hemo +
homo + drugs + karnof + oprior + z30 + zprior +
race + str2 + symptom + treat + offtrt,
cluster = pidnum, data = surr_mlbart,
weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,3+length(ngensizes)+match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- mean((testdat$cd4 - pred_babart)^2)
tree_size[(k-1)*10+i,3+length(ngensizes)+match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- (length(babart$tree)-1)/2
##### Smearing NOT Weighted ######
if(ngen != 1){
babart <- lmertree(y_gen ~ time | (1 | pidnum) | gender + wtkg + hemo +
homo + drugs + karnof + oprior + z30 + zprior +
race + str2 + symptom + treat + offtrt,
cluster = pidnum, data = surr_mlbart,
maxdepth = 5)
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE      [(k-1)*10+i,2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*(length(ngensizes)-1)+match(ngen, ngensizes)-1] <- mean((testdat$cd4 - pred_babart)^2)
tree_size[(k-1)*10+i,2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*(length(ngensizes)-1)+match(ngen, ngensizes)-1] <- (length(babart$tree)-1)/2
}
}
}
tel <- tel + 1
print(paste0("[",round((tel)/(nreps*nfolds)*100),"%]"))
}
}
)
set.seed(42)
data(ACTG175)
## Remove missings
ACTG175 <- ACTG175[!is.na(ACTG175$cd4), ]
sapply(data, class)
## Correct coding of factors
ACTG175$pidnum <- factor(ACTG175$pidnum)
ACTG175$hemo <- factor(ACTG175$hemo)
ACTG175$homo <- factor(ACTG175$homo)
ACTG175$drugs <- factor(ACTG175$drugs)
ACTG175$oprior <- factor(ACTG175$oprior)
ACTG175$z30 <- factor(ACTG175$z30)
ACTG175$zprior <- factor(ACTG175$zprior)
ACTG175$race <- factor(ACTG175$race)
ACTG175$str2 <- factor(ACTG175$str2)
ACTG175$symptom <- factor(ACTG175$symptom)
ACTG175$treat <- factor(ACTG175$treat)
ACTG175$offtrt <- factor(ACTG175$offtrt)
data <- ACTG175[ACTG175$pidnum %in% sample(x = unique(ACTG175$pidnum), size = 377),]
rm(ACTG175)
# ## Create objects for saving results
tree_size <- MSE <- as.data.frame(matrix(data = NA,
nrow = nfolds*nreps,
ncol = 3 +
length(ngensizes) +
nrow(BaSmear_design) +
length(ngensizes[ngensizes != 1]) +
nrow(BaSmear_design[!(BaSmear_design[,1] %in% 1),])))
colnames(tree_size) <- colnames(MSE) <- c("GLMM_tree", "Bart", "BA",
paste0("BaBart_N*",ngensizes),
paste0("Smearing_N*",BaSmear_design[,1], "_palt=",BaSmear_design[,2]),
paste0("BaBart_N*", ngensizes[ngensizes != 1], "_Nw"),
paste0("Smearing_N*",BaSmear_design[!(BaSmear_design[,1] %in% 1),][,1], "_palt=",
BaSmear_design[!(BaSmear_design[,1] %in% 1),][,2], "_Nw"))
tel <- 0
system.time(
for (k in 1:nreps){
# Generate train-test splits
fold_ids <- sample(rep(1:nfolds, times = ceiling(nrow(data)/nfolds)),
size = nrow(data), replace = FALSE)
for (i in 1:nfolds){
# train-test split
traindat <- data[fold_ids != i, ]
testdat <- data[fold_ids == i, ]
# Check whether all factor levels in test are also in train, else omit from test
for (fact in c("pidnum")) {
levs <- unique(testdat[ , fact]) %in% unique(traindat[ , fact])
if (!all(levs)) {
traindat <- rbind(traindat, testdat[which(!testdat[ , fact] %in% unique(testdat[ , fact])[levs]), ])
testdat <- testdat[-which(!testdat[ , fact] %in% unique(testdat[ , fact])[levs]), ]
print(paste0("Levels of fold ", i, " omitted from test data: ",
unique(testdat[ , fact])[!levs]))
}
}
###### Fit a regualar GLMM tree ######
glmtree <- lmertree(cd4 ~ time | (1 | pidnum) | gender + wtkg + hemo + homo +
drugs + karnof + oprior + z30 + zprior + race + str2 +
symptom + treat + offtrt,
data = traindat, cluster = pidnum)
pred_glmtree <- predict(glmtree, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,1] <- mean((testdat$cd4 - pred_glmtree)^2)
tree_size[(k-1)*10+i,1] <- (length(glmtree$tree)-1)/2
######  fit multilevel BART ######
Mbart <- rbart_vi(cd4 ~ time + gender + wtkg + hemo + homo + drugs +
karnof + oprior + z30 + zprior + race + str2 +
symptom + treat + offtrt,
data = traindat, group.by = traindat$pidnum,
test = testdat, group.by.test = testdat$pidnum,
combineChains = TRUE, seed = 42)
posterior <- Mbart$yhat.train
MSE[(k-1)*10+i,2] <- mean((testdat$cd4 - Mbart$yhat.test.mean)^2)
# fit BaBart GLMM trees with different sizes of Ngen using Baygen and smearing
for(ngen in ngensizes){
# Bayesian data generation
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
###### Baygen Weighted ######
babart <- lmertree(y_gen ~ time | (1 | pidnum) | gender + wtkg + hemo +
homo + drugs + karnof + oprior + z30 + zprior +
race + str2 + symptom + treat + offtrt,
cluster = pidnum, data = surr_mlbart,
weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,3+match(ngen,ngensizes)] <- mean((testdat$cd4 - pred_babart)^2)
tree_size[(k-1)*10+i,3+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
# ###### Baygen NOT Weighted ######
# if(ngen != 1){
#   babart <- lmertree(y_gen ~ time | (1 | pidnum) | gender + wtkg + hemo +
#                        homo + drugs + karnof + oprior + z30 + zprior +
#                        race + str2 + symptom + treat + offtrt,
#                      cluster = pidnum, data = surr_mlbart,
#                      maxdepth = 5)
#
#   pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
#   MSE[(k-1)*10+i,2+match(ngen,ngensizes)+length(ngensizes)+nrow(BaSmear_design)] <- mean((testdat$cd4 - pred_babart)^2)# :s
#   tree_size[(k-1)*10+i,2+match(ngen,ngensizes)+length(ngensizes)+nrow(BaSmear_design)] <- (length(babart$tree)-1)/2
# }
# smearing HIER MOET DE CLUSTERSTRUCTUUR WORDEN BEHOUDEN
for(palt in palts){
surr_mlbart <- gendata_smr(as_tibble(traindat), palt, ngen * nrow(traindat), keeps = c("pidnum"))
Mbart <- rbart_vi(cd4 ~ time + gender + wtkg + hemo + homo + drugs +
karnof + oprior + z30 + zprior + race + str2 +
symptom + treat + offtrt,
data = surr_mlbart, group.by = surr_mlbart$pidnum,
combineChains = TRUE,
seed = 42)
y_gen <- Mbart$yhat.train.mean
surr_mlbart <- cbind(surr_mlbart, y_gen)
###### Smearing Weighted ######
babart <- lmertree(y_gen ~ time | (1 | pidnum) | gender + wtkg + hemo +
homo + drugs + karnof + oprior + z30 + zprior +
race + str2 + symptom + treat + offtrt,
cluster = pidnum, data = surr_mlbart,
weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,3+length(ngensizes)+match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- mean((testdat$cd4 - pred_babart)^2)
tree_size[(k-1)*10+i,3+length(ngensizes)+match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- (length(babart$tree)-1)/2
# ##### Smearing NOT Weighted ######
# if(ngen != 1){
#   babart <- lmertree(y_gen ~ time | (1 | pidnum) | gender + wtkg + hemo +
#                      homo + drugs + karnof + oprior + z30 + zprior +
#                      race + str2 + symptom + treat + offtrt,
#                    cluster = pidnum, data = surr_mlbart,
#                    maxdepth = 5)
#
#   pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
#   MSE      [(k-1)*10+i,2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*(length(ngensizes)-1)+match(ngen, ngensizes)-1] <- mean((testdat$cd4 - pred_babart)^2)
#   tree_size[(k-1)*10+i,2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*(length(ngensizes)-1)+match(ngen, ngensizes)-1] <- (length(babart$tree)-1)/2
# }
}
}
tel <- tel + 1
print(paste0("[",round((tel)/(nreps*nfolds)*100),"%]"))
}
}
)
var(data$cd4)
plot(data$cd4)
hist(data$cd4)
400^2
sqrt(var(data$cd4))
set.seed(42)
data(ACTG175)
## Remove missings
ACTG175 <- ACTG175[!is.na(ACTG175$cd4), ]
sapply(data, class)
## Correct coding of factors
ACTG175$pidnum <- factor(ACTG175$pidnum)
ACTG175$hemo <- factor(ACTG175$hemo)
ACTG175$homo <- factor(ACTG175$homo)
ACTG175$drugs <- factor(ACTG175$drugs)
ACTG175$oprior <- factor(ACTG175$oprior)
ACTG175$z30 <- factor(ACTG175$z30)
ACTG175$zprior <- factor(ACTG175$zprior)
ACTG175$race <- factor(ACTG175$race)
ACTG175$str2 <- factor(ACTG175$str2)
ACTG175$symptom <- factor(ACTG175$symptom)
ACTG175$treat <- factor(ACTG175$treat)
ACTG175$offtrt <- factor(ACTG175$offtrt)
data <- ACTG175[ACTG175$pidnum %in% sample(x = unique(ACTG175$pidnum), size = 377),]
rm(ACTG175)
# ## Create objects for saving results
tree_size <- MSE <- as.data.frame(matrix(data = NA,
nrow = nfolds*nreps,
ncol = 3 +
length(ngensizes) +
nrow(BaSmear_design) +
length(ngensizes[ngensizes != 1]) +
nrow(BaSmear_design[!(BaSmear_design[,1] %in% 1),])))
colnames(tree_size) <- colnames(MSE) <- c("GLMM_tree", "Bart", "BA",
paste0("BaBart_N*",ngensizes),
paste0("Smearing_N*",BaSmear_design[,1], "_palt=",BaSmear_design[,2]),
paste0("BaBart_N*", ngensizes[ngensizes != 1], "_Nw"),
paste0("Smearing_N*",BaSmear_design[!(BaSmear_design[,1] %in% 1),][,1], "_palt=",
BaSmear_design[!(BaSmear_design[,1] %in% 1),][,2], "_Nw"))
tel <- 0
system.time(
for (k in 1:nreps){
# Generate train-test splits
fold_ids <- sample(rep(1:nfolds, times = ceiling(nrow(data)/nfolds)),
size = nrow(data), replace = FALSE)
for (i in 1:nfolds){
# train-test split
traindat <- data[fold_ids != i, ]
testdat <- data[fold_ids == i, ]
# Check whether all factor levels in test are also in train, else omit from test
for (fact in c("pidnum")) {
levs <- unique(testdat[ , fact]) %in% unique(traindat[ , fact])
if (!all(levs)) {
traindat <- rbind(traindat, testdat[which(!testdat[ , fact] %in% unique(testdat[ , fact])[levs]), ])
testdat <- testdat[-which(!testdat[ , fact] %in% unique(testdat[ , fact])[levs]), ]
print(paste0("Levels of fold ", i, " omitted from test data: ",
unique(testdat[ , fact])[!levs]))
}
}
###### Fit a regualar GLMM tree ######
glmtree <- lmertree(cd4 ~ time | (1 | pidnum) | gender + wtkg + hemo + homo +
drugs + karnof + oprior + z30 + zprior + race + str2 +
symptom + treat + offtrt,
data = traindat, cluster = pidnum)
pred_glmtree <- predict(glmtree, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,1] <- mean((testdat$cd4 - pred_glmtree)^2)
tree_size[(k-1)*10+i,1] <- (length(glmtree$tree)-1)/2
######  fit multilevel BART ######
Mbart <- rbart_vi(cd4 ~ time + gender + wtkg + hemo + homo + drugs +
karnof + oprior + z30 + zprior + race + str2 +
symptom + treat + offtrt,
data = traindat, group.by = traindat$pidnum,
test = testdat, group.by.test = testdat$pidnum,
combineChains = TRUE, seed = 42)
posterior <- Mbart$yhat.train
MSE[(k-1)*10+i,2] <- mean((testdat$cd4 - Mbart$yhat.test.mean)^2)
# fit BaBart GLMM trees with different sizes of Ngen using Baygen and smearing
for(ngen in ngensizes){
# Bayesian data generation
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
###### Baygen Weighted ######
babart <- lmertree(y_gen ~ time | (1 | pidnum) | gender + wtkg + hemo +
homo + drugs + karnof + oprior + z30 + zprior +
race + str2 + symptom + treat + offtrt,
cluster = pidnum, data = surr_mlbart,
weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,3+match(ngen,ngensizes)] <- mean((testdat$cd4 - pred_babart)^2)
tree_size[(k-1)*10+i,3+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
# ###### Baygen NOT Weighted ######
# if(ngen != 1){
#   babart <- lmertree(y_gen ~ time | (1 | pidnum) | gender + wtkg + hemo +
#                        homo + drugs + karnof + oprior + z30 + zprior +
#                        race + str2 + symptom + treat + offtrt,
#                      cluster = pidnum, data = surr_mlbart,
#                      maxdepth = 5)
#
#   pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
#   MSE[(k-1)*10+i,2+match(ngen,ngensizes)+length(ngensizes)+nrow(BaSmear_design)] <- mean((testdat$cd4 - pred_babart)^2)# :s
#   tree_size[(k-1)*10+i,2+match(ngen,ngensizes)+length(ngensizes)+nrow(BaSmear_design)] <- (length(babart$tree)-1)/2
# }
# smearing HIER MOET DE CLUSTERSTRUCTUUR WORDEN BEHOUDEN
for(palt in palts){
surr_mlbart <- gendata_smr(as_tibble(traindat), palt, ngen * nrow(traindat), keeps = c("pidnum"))
Mbart <- rbart_vi(cd4 ~ time + gender + wtkg + hemo + homo + drugs +
karnof + oprior + z30 + zprior + race + str2 +
symptom + treat + offtrt,
data = surr_mlbart, group.by = surr_mlbart$pidnum,
combineChains = TRUE,
seed = 42)
y_gen <- Mbart$yhat.train.mean
surr_mlbart <- cbind(surr_mlbart, y_gen)
###### Smearing Weighted ######
babart <- lmertree(y_gen ~ time | (1 | pidnum) | gender + wtkg + hemo +
homo + drugs + karnof + oprior + z30 + zprior +
race + str2 + symptom + treat + offtrt,
cluster = pidnum, data = surr_mlbart,
weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,3+length(ngensizes)+match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- mean((testdat$cd4 - pred_babart)^2)
tree_size[(k-1)*10+i,3+length(ngensizes)+match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- (length(babart$tree)-1)/2
# ##### Smearing NOT Weighted ######
# if(ngen != 1){
#   babart <- lmertree(y_gen ~ time | (1 | pidnum) | gender + wtkg + hemo +
#                      homo + drugs + karnof + oprior + z30 + zprior +
#                      race + str2 + symptom + treat + offtrt,
#                    cluster = pidnum, data = surr_mlbart,
#                    maxdepth = 5)
#
#   pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
#   MSE      [(k-1)*10+i,2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*(length(ngensizes)-1)+match(ngen, ngensizes)-1] <- mean((testdat$cd4 - pred_babart)^2)
#   tree_size[(k-1)*10+i,2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*(length(ngensizes)-1)+match(ngen, ngensizes)-1] <- (length(babart$tree)-1)/2
# }
}
}
tel <- tel + 1
print(paste0("[",round((tel)/(nreps*nfolds)*100),"%]"))
}
}
)
y_gen
length(y_gen)
tail(y_gen)
dim(surr_mlbart)
dim(traindata)
dim(traindat)
907*
5
gendata_smr(as_tibble(traindat), palt, ngen * nrow(traindat), keeps = c("pidnum"))
gendata_smr(as_data_frame(traindat), palt, ngen * nrow(traindat), keeps = c("pidnum"))
gendata_smr(as_tibble(traindat), palt, ngen * nrow(traindat), keeps = c("pidnum"))
