C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
P1FIRKDG + AGEBASELINE, data = traindat, cluster = CHILDID)
pred_glmtree <- predict(glmtree, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,1] <- mean((testdat$score - pred_glmtree)^2)
tree_size[(k-1)*10+i,1] <- (length(glmtree$tree)-1)/2
######  fit multilevel BART ######
Mbart <- rbart_vi(score ~ GENDER + RACE + WKSESL + C1GMOTOR + C1FMOTOR +
T1INTERN + T1EXTERN + T1INTERP + T1CONTRO + P1FIRKDG +
AGEBASELINE + months,
data = traindat, group.by = traindat$CHILDID,
test = testdat, group.by.test = testdat$CHILDID,
combineChains = TRUE, seed = 42)
posterior <- Mbart$yhat.train
MSE[(k-1)*10+i,2] <- mean((testdat$score - Mbart$yhat.test.mean)^2)
# fit BaBart GLMM trees with different sizes of Ngen using Baygen and smearing
for(ngen in ngensizes){
# Bayesian data generation
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
###### Baygen Weighted ######
babart <- lmertree(y_gen ~ 1 | (1|CHILDID) | months + GENDER + RACE + WKSESL + C1GMOTOR +
C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
P1FIRKDG + AGEBASELINE, data = surr_mlbart,
weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,3+match(ngen,ngensizes)] <- mean((testdat$score - pred_babart)^2)
tree_size[(k-1)*10+i,3+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
###### Baygen NOT Weighted ######
if(ngen != 1){
babart <- lmertree(y_gen ~ 1 | (1|CHILDID) | months + GENDER + RACE + WKSESL + C1GMOTOR +
C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
P1FIRKDG + AGEBASELINE, data = surr_mlbart)
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,2+match(ngen,ngensizes)+length(ngensizes)+nrow(BaSmear_design)] <- mean((testdat$score - pred_babart)^2)# :s
tree_size[(k-1)*10+i,2+match(ngen,ngensizes)+length(ngensizes)+nrow(BaSmear_design)] <- (length(babart$tree)-1)/2
}
# smearing HIER MOET DE CLUSTERSTRUCTUUR NOG WORDEN BEHOUDEN
for(palt in palts){
surr_mlbart <- gendata_smr(traindat, palt, ngen * nrow(traindat), keeps = c("CHILDID"))
Mbart <- rbart_vi(score ~ months + GENDER + RACE + WKSESL + C1GMOTOR +
C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
P1FIRKDG + AGEBASELINE,
data = traindat, test = surr_mlbart, group.by = CHILDID,
verbose = FALSE, combineChains = TRUE)
y_gen <- Mbart$yhat.train.mean
surr_mlbart <- cbind(surr_mlbart, y_gen)
###### Smearing Weighted ######
babart <- lmertree(y_gen ~ 1 | (1|CHILDID) | months + GENDER + RACE + WKSESL + C1GMOTOR +
C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
P1FIRKDG + AGEBASELINE, cluster = CHILDID,
data = surr_mlbart, weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,3+length(ngensizes)+match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- mean((testdat$score - pred_babart)^2)
tree_size[(k-1)*10+i,3+length(ngensizes)+match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- (length(babart$tree)-1)/2
##### Smearing NOT Weighted ######
if(ngen != 1){
babart <- lmertree(y_gen ~ 1 | (1|CHILDID) | months + GENDER + RACE + WKSESL + C1GMOTOR +
C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
P1FIRKDG + AGEBASELINE, cluster = CHILDID,
data = surr_dat)
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE      [(k-1)*10+i,2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*(length(ngensizes)-1)+match(ngen, ngensizes)-1] <- mean((testdat$score - pred_babart)^2)
tree_size[(k-1)*10+i,2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*(length(ngensizes)-1)+match(ngen, ngensizes)-1] <- (length(babart$tree)-1)/2
}
}
}
tel <- tel + 1
print(paste0("[",round((tel)/(nreps*nfolds)*100),"%]"))
}
}
)
set.seed(42)
load(file.path(here(),"Project David","ECLSK","Math ability data.Rdata"))
data <- mathdata[mathdata$CHILDID %in% sample(x = unique(mathdata$CHILDID), size = 200),]
sapply(X = data, FUN = class)
table(data$RACE)
data$CHILDID <- factor(data$CHILDID)
rm(mathdata)
tel <- 0
system.time(
for (k in 1:nreps){
# Generate train-test splits
fold_ids <- sample(rep(1:nfolds, times = ceiling(nrow(data)/nfolds)),
size = nrow(data), replace = FALSE)
for (i in 1:nfolds){
# train-test split
traindat <- data[fold_ids != i, ]
testdat <- data[fold_ids == i, ]
# Check whether all factor levels in test are also in train, else omit from test
for (fact in c("CHILDID","RACE")) {
levs <- unique(testdat[ , fact]) %in% unique(traindat[ , fact])
if (!all(levs)) {
testdat <- testdat[-which(!testdat[ , fact] %in% unique(testdat[ , fact])[levs]), ]
print(paste0("Levels of fold ", i, " omitted from test data: ",
unique(testdat[ , fact])[!levs]))
}
}
###### Fit a regualar GLMM tree ######
glmtree <- lmertree(score ~ 1 | (1|CHILDID) | months + GENDER + RACE + WKSESL + C1GMOTOR +
C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
P1FIRKDG + AGEBASELINE, data = traindat, cluster = CHILDID)
pred_glmtree <- predict(glmtree, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,1] <- mean((testdat$score - pred_glmtree)^2)
tree_size[(k-1)*10+i,1] <- (length(glmtree$tree)-1)/2
######  fit multilevel BART ######
Mbart <- rbart_vi(score ~ GENDER + RACE + WKSESL + C1GMOTOR + C1FMOTOR +
T1INTERN + T1EXTERN + T1INTERP + T1CONTRO + P1FIRKDG +
AGEBASELINE + months,
data = traindat, group.by = traindat$CHILDID,
test = testdat, group.by.test = testdat$CHILDID,
combineChains = TRUE, seed = 42)
posterior <- Mbart$yhat.train
MSE[(k-1)*10+i,2] <- mean((testdat$score - Mbart$yhat.test.mean)^2)
# fit BaBart GLMM trees with different sizes of Ngen using Baygen and smearing
for(ngen in ngensizes){
# Bayesian data generation
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
###### Baygen Weighted ######
babart <- lmertree(y_gen ~ 1 | (1|CHILDID) | months + GENDER + RACE + WKSESL + C1GMOTOR +
C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
P1FIRKDG + AGEBASELINE, data = surr_mlbart,
weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,3+match(ngen,ngensizes)] <- mean((testdat$score - pred_babart)^2)
tree_size[(k-1)*10+i,3+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
###### Baygen NOT Weighted ######
if(ngen != 1){
babart <- lmertree(y_gen ~ 1 | (1|CHILDID) | months + GENDER + RACE + WKSESL + C1GMOTOR +
C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
P1FIRKDG + AGEBASELINE, data = surr_mlbart)
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,2+match(ngen,ngensizes)+length(ngensizes)+nrow(BaSmear_design)] <- mean((testdat$score - pred_babart)^2)# :s
tree_size[(k-1)*10+i,2+match(ngen,ngensizes)+length(ngensizes)+nrow(BaSmear_design)] <- (length(babart$tree)-1)/2
}
# smearing HIER MOET DE CLUSTERSTRUCTUUR NOG WORDEN BEHOUDEN
for(palt in palts){
surr_mlbart <- gendata_smr(as_tibble(traindat), palt, ngen * nrow(traindat), keeps = c("CHILDID"))
# Dit klopt toch niet?? ik snap het iig niet
# Mbart <- rbart_vi(score ~ months + GENDER + RACE + WKSESL + C1GMOTOR +
#             C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
#             P1FIRKDG + AGEBASELINE,
#             data = traindat, test = surr_mlbart, group.by = CHILDID,
#             verbose = FALSE, combineChains = TRUE)
#
# y_gen <- colMeans(brt$yhat.test)
# surr_dat <- cbind(surr_dat, y_gen)
Mbart <- rbart_vi(score ~ GENDER + RACE + WKSESL + C1GMOTOR + C1FMOTOR +
T1INTERN + T1EXTERN + T1INTERP + T1CONTRO + P1FIRKDG +
AGEBASELINE + months,
data = surr_mlbart, group.by = surr_mlbart$CHILDID,
n.trees = 100, keepTrees = TRUE, combineChains = TRUE, seed = 42)
y_gen <- Mbart$yhat.train.mean
surr_mlbart <- cbind(surr_mlbart, y_gen)
###### Smearing Weighted ######
babart <- lmertree(y_gen ~ 1 | (1|CHILDID) | months + GENDER + RACE + WKSESL + C1GMOTOR +
C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
P1FIRKDG + AGEBASELINE, cluster = CHILDID,
data = surr_mlbart, weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,3+length(ngensizes)+match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- mean((testdat$score - pred_babart)^2)
tree_size[(k-1)*10+i,3+length(ngensizes)+match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- (length(babart$tree)-1)/2
##### Smearing NOT Weighted ######
if(ngen != 1){
babart <- lmertree(y_gen ~ 1 | (1|CHILDID) | months + GENDER + RACE + WKSESL + C1GMOTOR +
C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
P1FIRKDG + AGEBASELINE, cluster = CHILDID,
data = surr_dat)
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE      [(k-1)*10+i,2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*(length(ngensizes)-1)+match(ngen, ngensizes)-1] <- mean((testdat$score - pred_babart)^2)
tree_size[(k-1)*10+i,2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*(length(ngensizes)-1)+match(ngen, ngensizes)-1] <- (length(babart$tree)-1)/2
}
}
}
tel <- tel + 1
print(paste0("[",round((tel)/(nreps*nfolds)*100),"%]"))
}
}
)
dim(gendata_smr(as_tibble(traindat), palt, ngen * nrow(traindat), keeps = c("CHILDID")))
set.seed(42)
load(file.path(here(),"Project David","ECLSK","Math ability data.Rdata"))
data <- mathdata[mathdata$CHILDID %in% sample(x = unique(mathdata$CHILDID), size = 200),]
sapply(X = data, FUN = class)
table(data$RACE)
data$CHILDID <- factor(data$CHILDID)
rm(mathdata)
tel <- 0
system.time(
for (k in 1:nreps){
# Generate train-test splits
fold_ids <- sample(rep(1:nfolds, times = ceiling(nrow(data)/nfolds)),
size = nrow(data), replace = FALSE)
for (i in 1:nfolds){
# train-test split
traindat <- data[fold_ids != i, ]
testdat <- data[fold_ids == i, ]
# Check whether all factor levels in test are also in train, else omit from test
for (fact in c("CHILDID","RACE")) {
levs <- unique(testdat[ , fact]) %in% unique(traindat[ , fact])
if (!all(levs)) {
testdat <- testdat[-which(!testdat[ , fact] %in% unique(testdat[ , fact])[levs]), ]
print(paste0("Levels of fold ", i, " omitted from test data: ",
unique(testdat[ , fact])[!levs]))
}
}
###### Fit a regualar GLMM tree ######
glmtree <- lmertree(score ~ 1 | (1|CHILDID) | months + GENDER + RACE + WKSESL + C1GMOTOR +
C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
P1FIRKDG + AGEBASELINE, data = traindat, cluster = CHILDID)
pred_glmtree <- predict(glmtree, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,1] <- mean((testdat$score - pred_glmtree)^2)
tree_size[(k-1)*10+i,1] <- (length(glmtree$tree)-1)/2
######  fit multilevel BART ######
Mbart <- rbart_vi(score ~ GENDER + RACE + WKSESL + C1GMOTOR + C1FMOTOR +
T1INTERN + T1EXTERN + T1INTERP + T1CONTRO + P1FIRKDG +
AGEBASELINE + months,
data = traindat, group.by = traindat$CHILDID,
test = testdat, group.by.test = testdat$CHILDID,
combineChains = TRUE, seed = 42)
posterior <- Mbart$yhat.train
MSE[(k-1)*10+i,2] <- mean((testdat$score - Mbart$yhat.test.mean)^2)
# fit BaBart GLMM trees with different sizes of Ngen using Baygen and smearing
for(ngen in ngensizes){
# Bayesian data generation
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
###### Baygen Weighted ######
babart <- lmertree(y_gen ~ 1 | (1|CHILDID) | months + GENDER + RACE + WKSESL + C1GMOTOR +
C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
P1FIRKDG + AGEBASELINE, data = surr_mlbart,
weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,3+match(ngen,ngensizes)] <- mean((testdat$score - pred_babart)^2)
tree_size[(k-1)*10+i,3+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
###### Baygen NOT Weighted ######
if(ngen != 1){
babart <- lmertree(y_gen ~ 1 | (1|CHILDID) | months + GENDER + RACE + WKSESL + C1GMOTOR +
C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
P1FIRKDG + AGEBASELINE, data = surr_mlbart)
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,2+match(ngen,ngensizes)+length(ngensizes)+nrow(BaSmear_design)] <- mean((testdat$score - pred_babart)^2)# :s
tree_size[(k-1)*10+i,2+match(ngen,ngensizes)+length(ngensizes)+nrow(BaSmear_design)] <- (length(babart$tree)-1)/2
}
# smearing HIER MOET DE CLUSTERSTRUCTUUR NOG WORDEN BEHOUDEN
for(palt in palts){
surr_mlbart <- gendata_smr(as_tibble(traindat), palt, ngen * nrow(traindat), keeps = c("CHILDID"))
# Dit klopt toch niet?? ik snap het iig niet
# Mbart <- rbart_vi(score ~ months + GENDER + RACE + WKSESL + C1GMOTOR +
#             C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
#             P1FIRKDG + AGEBASELINE,
#             data = traindat, test = surr_mlbart, group.by = CHILDID,
#             verbose = FALSE, combineChains = TRUE)
#
# y_gen <- colMeans(brt$yhat.test)
# surr_dat <- cbind(surr_dat, y_gen)
Mbart <- rbart_vi(score ~ GENDER + RACE + WKSESL + C1GMOTOR + C1FMOTOR +
T1INTERN + T1EXTERN + T1INTERP + T1CONTRO + P1FIRKDG +
AGEBASELINE + months,
data = surr_mlbart, group.by = surr_mlbart$CHILDID,
n.trees = 100, keepTrees = TRUE, combineChains = TRUE, seed = 42)
y_gen <- Mbart$yhat.train.mean
surr_mlbart <- cbind(surr_mlbart, y_gen)
###### Smearing Weighted ######
babart <- lmertree(y_gen ~ 1 | (1|CHILDID) | months + GENDER + RACE + WKSESL + C1GMOTOR +
C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
P1FIRKDG + AGEBASELINE, cluster = CHILDID,
data = surr_mlbart, weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,3+length(ngensizes)+match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- mean((testdat$score - pred_babart)^2)
tree_size[(k-1)*10+i,3+length(ngensizes)+match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- (length(babart$tree)-1)/2
##### Smearing NOT Weighted ######
if(ngen != 1){
babart <- lmertree(y_gen ~ 1 | (1|CHILDID) | months + GENDER + RACE + WKSESL + C1GMOTOR +
C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
P1FIRKDG + AGEBASELINE, cluster = CHILDID,
data = surr_mlbart)
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE      [(k-1)*10+i,2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*(length(ngensizes)-1)+match(ngen, ngensizes)-1] <- mean((testdat$score - pred_babart)^2)
tree_size[(k-1)*10+i,2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*(length(ngensizes)-1)+match(ngen, ngensizes)-1] <- (length(babart$tree)-1)/2
}
}
}
tel <- tel + 1
print(paste0("[",round((tel)/(nreps*nfolds)*100),"%]"))
}
}
)
set.seed(42)
load(file.path(here(),"Project David","ECLSK","Reading ability data.Rdata"))
data <- readdata[readdata$CHILDID %in% sample(x = unique(readdata$CHILDID), size = 200),]
data$asmtmm <- factor(data$asmtmm)
data$CHILDID <- factor(data$CHILDID)
rm(readdata)
set.seed(42)
load(file.path(here(),"Project David","ECLSK","Reading ability data.Rdata"))
data <- readdata[readdata$CHILDID %in% sample(x = unique(readdata$CHILDID), size = 200),]
data$asmtmm <- factor(data$asmtmm)
data$CHILDID <- factor(data$CHILDID)
rm(readdata)
tel <- 0
system.time(
for (k in 1:nreps){
# Generate train-test splits
fold_ids <- sample(rep(1:nfolds, times = ceiling(nrow(data)/nfolds)),
size = nrow(data), replace = FALSE)
for (i in 1:nfolds){
# train-test split
traindat <- data[fold_ids != i, ]
testdat <- data[fold_ids == i, ]
# Check whether all factor levels in test are also in train, else omit from test
for (fact in c("CHILDID","RACE")) {
levs <- unique(testdat[ , fact]) %in% unique(traindat[ , fact])
if (!all(levs)) {
testdat <- testdat[-which(!testdat[ , fact] %in% unique(testdat[ , fact])[levs]), ]
print(paste0("Levels of fold ", i, " omitted from test data: ",
unique(testdat[ , fact])[!levs]))
}
}
###### Fit a regualar GLMM tree ######
glmtree <- lmertree(score ~ 1 | (1|CHILDID) | months + GENDER + RACE + WKSESL + C1GMOTOR +
C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
P1FIRKDG + AGEBASELINE, data = traindat, cluster = CHILDID)
pred_glmtree <- predict(glmtree, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,1] <- mean((testdat$score - pred_glmtree)^2)
tree_size[(k-1)*10+i,1] <- (length(glmtree$tree)-1)/2
######  fit multilevel BART ######
Mbart <- rbart_vi(score ~ GENDER + RACE + WKSESL + C1GMOTOR + C1FMOTOR +
T1INTERN + T1EXTERN + T1INTERP + T1CONTRO + P1FIRKDG +
AGEBASELINE + months,
data = traindat, group.by = traindat$CHILDID,
test = testdat, group.by.test = testdat$CHILDID,
combineChains = TRUE, seed = 42)
posterior <- Mbart$yhat.train
MSE[(k-1)*10+i,2] <- mean((testdat$score - Mbart$yhat.test.mean)^2)
# fit BaBart GLMM trees with different sizes of Ngen using Baygen and smearing
for(ngen in ngensizes){
# Bayesian data generation
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
###### Baygen Weighted ######
babart <- lmertree(y_gen ~ 1 | (1|CHILDID) | months + GENDER + RACE + WKSESL + C1GMOTOR +
C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
P1FIRKDG + AGEBASELINE, data = surr_mlbart,
weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,3+match(ngen,ngensizes)] <- mean((testdat$score - pred_babart)^2)
tree_size[(k-1)*10+i,3+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
###### Baygen NOT Weighted ######
if(ngen != 1){
babart <- lmertree(y_gen ~ 1 | (1|CHILDID) | months + GENDER + RACE + WKSESL + C1GMOTOR +
C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
P1FIRKDG + AGEBASELINE, data = surr_mlbart)
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,2+match(ngen,ngensizes)+length(ngensizes)+nrow(BaSmear_design)] <- mean((testdat$score - pred_babart)^2)# :s
tree_size[(k-1)*10+i,2+match(ngen,ngensizes)+length(ngensizes)+nrow(BaSmear_design)] <- (length(babart$tree)-1)/2
}
# smearing HIER MOET DE CLUSTERSTRUCTUUR NOG WORDEN BEHOUDEN
for(palt in palts){
surr_mlbart <- gendata_smr(as_tibble(traindat), palt, ngen * nrow(traindat), keeps = c("CHILDID"))
# Dit klopt toch niet?? ik snap het iig niet
# Mbart <- rbart_vi(score ~ months + GENDER + RACE + WKSESL + C1GMOTOR +
#             C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
#             P1FIRKDG + AGEBASELINE,
#             data = traindat, test = surr_mlbart, group.by = CHILDID,
#             verbose = FALSE, combineChains = TRUE)
#
# y_gen <- colMeans(brt$yhat.test)
# surr_dat <- cbind(surr_dat, y_gen)
Mbart <- rbart_vi(score ~ GENDER + RACE + WKSESL + C1GMOTOR + C1FMOTOR +
T1INTERN + T1EXTERN + T1INTERP + T1CONTRO + P1FIRKDG +
AGEBASELINE + months,
data = surr_mlbart, group.by = surr_mlbart$CHILDID,
n.trees = 100, keepTrees = TRUE, combineChains = TRUE, seed = 42)
y_gen <- Mbart$yhat.train.mean
surr_mlbart <- cbind(surr_mlbart, y_gen)
###### Smearing Weighted ######
babart <- lmertree(y_gen ~ 1 | (1|CHILDID) | months + GENDER + RACE + WKSESL + C1GMOTOR +
C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
P1FIRKDG + AGEBASELINE, cluster = CHILDID,
data = surr_mlbart, weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,3+length(ngensizes)+match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- mean((testdat$score - pred_babart)^2)
tree_size[(k-1)*10+i,3+length(ngensizes)+match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- (length(babart$tree)-1)/2
##### Smearing NOT Weighted ######
if(ngen != 1){
babart <- lmertree(y_gen ~ 1 | (1|CHILDID) | months + GENDER + RACE + WKSESL + C1GMOTOR +
C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
P1FIRKDG + AGEBASELINE, cluster = CHILDID,
data = surr_mlbart)
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE      [(k-1)*10+i,2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*(length(ngensizes)-1)+match(ngen, ngensizes)-1] <- mean((testdat$score - pred_babart)^2)
tree_size[(k-1)*10+i,2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*(length(ngensizes)-1)+match(ngen, ngensizes)-1] <- (length(babart$tree)-1)/2
}
}
}
tel <- tel + 1
print(paste0("[",round((tel)/(nreps*nfolds)*100),"%]"))
}
}
)
set.seed(42)
load(file.path(here(),"Project David","ECLSK","Science ability data.Rdata"))
data <- sciedata[sciedata$CHILDID %in% sample(x = unique(sciedata$CHILDID), size = 400),]
data$asmtmm <- as.factor(data$asmtmm)
rm(sciedata)
set.seed(42)
load(file.path(here(),"Project David","ECLSK","Science ability data.Rdata"))
data <- sciedata[sciedata$CHILDID %in% sample(x = unique(sciedata$CHILDID), size = 333),]
data$asmtmm <- as.factor(data$asmtmm)
rm(sciedata)
set.seed(42)
load(file.path(here(),"Project David","ECLSK","Science ability data.Rdata"))
data <- sciedata[sciedata$CHILDID %in% sample(x = unique(sciedata$CHILDID), size = 333),]
data$asmtmm <- as.factor(data$asmtmm)
rm(sciedata)
tel <- 0
system.time(
for (k in 1:nreps){
# Generate train-test splits
fold_ids <- sample(rep(1:nfolds, times = ceiling(nrow(data)/nfolds)),
size = nrow(data), replace = FALSE)
for (i in 1:nfolds){
# train-test split
traindat <- data[fold_ids != i, ]
testdat <- data[fold_ids == i, ]
# Check whether all factor levels in test are also in train, else omit from test
for (fact in c("CHILDID","RACE")) {
levs <- unique(testdat[ , fact]) %in% unique(traindat[ , fact])
if (!all(levs)) {
testdat <- testdat[-which(!testdat[ , fact] %in% unique(testdat[ , fact])[levs]), ]
print(paste0("Levels of fold ", i, " omitted from test data: ",
unique(testdat[ , fact])[!levs]))
}
}
###### Fit a regualar GLMM tree ######
glmtree <- lmertree(score ~ 1 | (1|CHILDID) | months + GENDER + RACE + WKSESL + C1GMOTOR +
C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
P1FIRKDG + AGEBASELINE, data = traindat, cluster = CHILDID)
pred_glmtree <- predict(glmtree, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,1] <- mean((testdat$score - pred_glmtree)^2)
tree_size[(k-1)*10+i,1] <- (length(glmtree$tree)-1)/2
######  fit multilevel BART ######
Mbart <- rbart_vi(score ~ GENDER + RACE + WKSESL + C1GMOTOR + C1FMOTOR +
T1INTERN + T1EXTERN + T1INTERP + T1CONTRO + P1FIRKDG +
AGEBASELINE + months,
data = traindat, group.by = traindat$CHILDID,
test = testdat, group.by.test = testdat$CHILDID,
combineChains = TRUE, seed = 42)
posterior <- Mbart$yhat.train
MSE[(k-1)*10+i,2] <- mean((testdat$score - Mbart$yhat.test.mean)^2)
# fit BaBart GLMM trees with different sizes of Ngen using Baygen and smearing
for(ngen in ngensizes){
# Bayesian data generation
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
###### Baygen Weighted ######
babart <- lmertree(y_gen ~ 1 | (1|CHILDID) | months + GENDER + RACE + WKSESL + C1GMOTOR +
C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
P1FIRKDG + AGEBASELINE, data = surr_mlbart,
weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,3+match(ngen,ngensizes)] <- mean((testdat$score - pred_babart)^2)
tree_size[(k-1)*10+i,3+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
###### Baygen NOT Weighted ######
if(ngen != 1){
babart <- lmertree(y_gen ~ 1 | (1|CHILDID) | months + GENDER + RACE + WKSESL + C1GMOTOR +
C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
P1FIRKDG + AGEBASELINE, data = surr_mlbart)
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,2+match(ngen,ngensizes)+length(ngensizes)+nrow(BaSmear_design)] <- mean((testdat$score - pred_babart)^2)# :s
tree_size[(k-1)*10+i,2+match(ngen,ngensizes)+length(ngensizes)+nrow(BaSmear_design)] <- (length(babart$tree)-1)/2
}
# smearing HIER MOET DE CLUSTERSTRUCTUUR NOG WORDEN BEHOUDEN
for(palt in palts){
surr_mlbart <- gendata_smr(as_tibble(traindat), palt, ngen * nrow(traindat), keeps = c("CHILDID"))
# Dit klopt toch niet?? ik snap het iig niet
# Mbart <- rbart_vi(score ~ months + GENDER + RACE + WKSESL + C1GMOTOR +
#             C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
#             P1FIRKDG + AGEBASELINE,
#             data = traindat, test = surr_mlbart, group.by = CHILDID,
#             verbose = FALSE, combineChains = TRUE)
#
# y_gen <- colMeans(brt$yhat.test)
# surr_dat <- cbind(surr_dat, y_gen)
Mbart <- rbart_vi(score ~ GENDER + RACE + WKSESL + C1GMOTOR + C1FMOTOR +
T1INTERN + T1EXTERN + T1INTERP + T1CONTRO + P1FIRKDG +
AGEBASELINE + months,
data = surr_mlbart, group.by = surr_mlbart$CHILDID,
n.trees = 100, keepTrees = TRUE, combineChains = TRUE, seed = 42)
y_gen <- Mbart$yhat.train.mean
surr_mlbart <- cbind(surr_mlbart, y_gen)
###### Smearing Weighted ######
babart <- lmertree(y_gen ~ 1 | (1|CHILDID) | months + GENDER + RACE + WKSESL + C1GMOTOR +
C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
P1FIRKDG + AGEBASELINE, cluster = CHILDID,
data = surr_mlbart, weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,3+length(ngensizes)+match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- mean((testdat$score - pred_babart)^2)
tree_size[(k-1)*10+i,3+length(ngensizes)+match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- (length(babart$tree)-1)/2
##### Smearing NOT Weighted ######
if(ngen != 1){
babart <- lmertree(y_gen ~ 1 | (1|CHILDID) | months + GENDER + RACE + WKSESL + C1GMOTOR +
C1FMOTOR + T1INTERN + T1EXTERN + T1INTERP + T1CONTRO +
P1FIRKDG + AGEBASELINE, cluster = CHILDID,
data = surr_mlbart)
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE      [(k-1)*10+i,2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*(length(ngensizes)-1)+match(ngen, ngensizes)-1] <- mean((testdat$score - pred_babart)^2)
tree_size[(k-1)*10+i,2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*(length(ngensizes)-1)+match(ngen, ngensizes)-1] <- (length(babart$tree)-1)/2
}
}
}
tel <- tel + 1
print(paste0("[",round((tel)/(nreps*nfolds)*100),"%]"))
}
}
)
