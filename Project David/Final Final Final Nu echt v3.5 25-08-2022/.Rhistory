rm(data)
# add to long dataset
allMSElong$Variance <- NA
allMSElong$Variance[(allMSElong$Dataset == "ACT")] <- var_ACT
allMSElong$Variance[(allMSElong$Dataset == "ECLSKmath")] <- var_math
allMSElong$Variance[(allMSElong$Dataset == "ECLSKreading")] <- var_reading
allMSElong$Variance[(allMSElong$Dataset == "ECLSKschool")] <- var_school
allMSElong$Variance[(allMSElong$Dataset == "ECLSKscience")] <- var_science
allMSElong$Variance[(allMSElong$Dataset == "marriage")] <- var_marriage
allMSElong$Variance[(allMSElong$Dataset == "Safety")] <- var_safety
allMSElong$Rsquared <- 1 - allMSElong$MSE / allMSElong$Variance
levels(allMSElong$Model) <- c("GLMM tree","BART", "PPD: N=1", "PPD: N=5", "PPD: N=10", "smearing: N=1, palt=0.00", "smearing: N=5, palt=0.00", "smearing: N=10, palt=0.00", "smearing: N=1, palt=0.25", "smearing: N=5, palt=0.25", "smearing: N=10, palt=0.25", "smearing: N=1, palt=0.50", "smearing: N=5, palt=0.50", "smearing: N=10, palt=0.50")
# plot combined Rsquared
ggplot(allMSElong, aes(x=Rsquared, y=Model, fill=Model)) +
geom_boxplot() +
labs(x = "MSE / variance(y) a.k.a. Rsquared") +
theme(legend.position = "none",
axis.title=element_text(size=14,face="bold"),
axis.text=element_text(size=12),
legend.text=element_text(size=12),
legend.title=element_text(size=14,face="bold"),
plot.title=element_text(size=18,face="bold")) +
ggtitle(expression(R^2~" combined"))
ggplot(allMSElong, aes(x=Dataset, y=Rsquared, fill=Model)) +
geom_boxplot() +
facet_wrap(~Dataset, scales = "free_x", nrow = 2) +
theme(axis.title=element_text(size=14,face="bold"),
axis.text=element_text(size=12),
legend.text=element_text(size=12),
legend.title=element_text(size=14,face="bold"),
legend.position = c(0.82,0.25),
plot.title=element_text(size=18,face="bold")) +
ylab(expression(R^2)) +
ggtitle(expression(R^2~" for every dataset"))
ggplot(allMSElong[allMSElong$Dataset == "marriage",], aes(x=Rsquared, y=Model)) +
scale_y_discrete(limits = rev(levels(allMSElong$Model))) +
geom_violin() +
theme_apa() +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange") +
xlab(expression(R^2)) +
ggtitle(expression(R^2 ~ " for every model on Marriage dataset"))
ggplot(allMSElong[allMSElong$Dataset == "ECLSKschool",], aes(x=Rsquared, y=Model)) +
scale_y_discrete(limits = rev(levels(allMSElong$Model))) +
geom_violin() +
theme_apa() +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange") +
xlab(expression(R^2)) +
ggtitle(expression(R^2 ~ " for every model on ECLSKscience dataset"))
# data preperation T_T
{
# finds the highest Rsq for every dataset, and calculates mean.
Rsquared_best_means <- allMSElong %>%
dplyr::group_by(Model, Dataset) %>%
dplyr::mutate(Rsquared.Mean = mean(Rsquared), Rsquared.SD = sd(Rsquared)) %>%
dplyr::ungroup() %>%
dplyr::select(Model, Dataset, Rsquared.Mean, Rsquared.SD) %>%
dplyr::distinct() %>%
dplyr::mutate(dummy_Model = substr(Model, 1,3)) %>%
dplyr::group_by(Dataset, dummy_Model) %>%
dplyr::top_n(1, Rsquared.Mean) %>%
dplyr::ungroup() %>%
dplyr::select(Model, Dataset, Rsquared.Mean, Rsquared.SD) %>%
dplyr::arrange(Dataset)
# for every highest Rsq model, add every value of Rsq to the row
Rsquared_empty <- as.data.frame(matrix(NA, nrow = nrow(Rsquared_best_means), ncol = 100))
for(i in 1:nrow(Rsquared_best_means)){
tempRsquareds <- (allMSElong) %>%
dplyr::select(Model, Dataset, Rsquared) %>%
dplyr::filter(Model == as.character(sjlabelled::to_character(Rsquared_best_means[i,1])) & Dataset == as.character(to_character(Rsquared_best_means[i,2]))) %>%
dplyr::select(Rsquared) %>%
t() %>%
as_vector()
Rsquared_empty[i,] <- tempRsquareds
}
Rsquared_best_total <- cbind(Rsquared_best_means, Rsquared_empty)
}
# statistical tests: ANOVA
ANOVA_list <- Rsquared_best_total %>%
dplyr::select(-Rsquared.Mean, -Rsquared.SD) %>%
split(f = .$Dataset) %>%
map(~ (.) %>% dplyr::select(-Dataset) %>%
stats::reshape(varying = c(2:101), v.names = "Rsquared", idvar = "Model", timevar = "fold", direction = "long") %>%
stats::aov(formula = Rsquared ~ Model) %>%
summary
)
# statistical tests: Tukey
tukey_list <- Rsquared_best_total %>%
dplyr::select(-Rsquared.Mean, -Rsquared.SD) %>%
split(f = .$Dataset) %>%
map(~ (.) %>% dplyr::select(-Dataset) %>%
stats::reshape(varying = c(2:101), v.names = "Rsquared", idvar = "Model", timevar = "fold", direction = "long") %>%
rstatix::tukey_hsd(formula = Rsquared ~ Model) %>%
dplyr::mutate(contrast = paste0(.$group1,"---",.$group2),
contrast = str_split(contrast, "---"))
)
# boxplots with tukey tests (i just found out ggbetweenstats is better)
plot_list <- Rsquared_best_total %>%
dplyr::select(-Rsquared.Mean, -Rsquared.SD) %>%
split(f = .$Dataset) %>%
imap(~ (.x) %>% dplyr::select(-Dataset) %>%
stats::reshape(varying = c(2:101), v.names = "Rsquared", idvar = "Model", timevar = "fold", direction = "long") %>%
ggplot(., aes(x = Model, y = Rsquared)) +
geom_boxplot() +
theme_apa() +
ggtitle(label = .y) +
geom_signif(
comparisons = tukey_list[[.y]]$contrast, # hier zou je kunnen aanvragen om alleen glmm met ppd en smearing te doen (of misschien in Tukey test)
y_position = seq(from = max(.x[,3:102])+0.02, to = (max(.x[,3:102]) + (max(.x[,3:102]) - min(.x[,3:102]))/2), length.out = 6),
annotations = tukey_list[[.y]]$p.adj.signif
)
)
test <- Rsquared_best_total %>%
dplyr::select(-Rsquared.Mean, -Rsquared.SD) %>%
split(f = .$Dataset) %>%
map(~ (.) %>% dplyr::select(-Dataset) %>%
stats::reshape(varying = c(2:101), v.names = "Rsquared", idvar = "Model", timevar = "fold", direction = "long") %>%
stats::aov(formula = Rsquared ~ Model) %>%
TukeyHSD()
)
# Perform Tukey's HSD test for pairwise comparisons
tukey_result <- test[[1]]
# Extract the mean differences and standard errors
mean_diff <- tukey_result$diffs[, 1]
std_error <- tukey_result$sim$std.err
# Calculate the t-values for each pairwise comparison
t_values <- mean_diff / std_error
# Calculate the unadjusted p-values using the studentized range distribution
unadj_p_values <- 2 * ptukey(abs(t_values), df1 = tukey_result$df, nmeans = tukey_result$trt, lower.tail = FALSE)
# data preperation T_T
{
# finds the highest Rsq for every dataset, and calculates mean.
Rsquared_best_means <- allMSElong %>%
dplyr::group_by(Model, Dataset) %>%
dplyr::mutate(Rsquared.Mean = mean(Rsquared), Rsquared.SD = sd(Rsquared)) %>%
dplyr::ungroup() %>%
dplyr::select(Model, Dataset, Rsquared.Mean, Rsquared.SD) %>%
dplyr::distinct() %>%
dplyr::mutate(dummy_Model = substr(Model, 1,3)) %>%
dplyr::group_by(Dataset, dummy_Model) %>%
dplyr::top_n(1, Rsquared.Mean) %>%
dplyr::ungroup() %>%
dplyr::select(Model, Dataset, Rsquared.Mean, Rsquared.SD) %>%
dplyr::arrange(Dataset)
# for every highest Rsq model, add every value of Rsq to the row
Rsquared_empty <- as.data.frame(matrix(NA, nrow = nrow(Rsquared_best_means), ncol = 100))
for(i in 1:nrow(Rsquared_best_means)){
tempRsquareds <- (allMSElong) %>%
dplyr::select(Model, Dataset, Rsquared) %>%
dplyr::filter(Model == as.character(sjlabelled::to_character(Rsquared_best_means[i,1])) & Dataset == as.character(to_character(Rsquared_best_means[i,2]))) %>%
dplyr::select(Rsquared) %>%
t() %>%
as_vector()
Rsquared_empty[i,] <- tempRsquareds
}
Rsquared_best_total <- cbind(Rsquared_best_means, Rsquared_empty)
}
# statistical tests: ANOVA
ANOVA_list <- Rsquared_best_total %>%
dplyr::select(-Rsquared.Mean, -Rsquared.SD) %>%
split(f = .$Dataset) %>%
map(~ (.) %>% dplyr::select(-Dataset) %>%
stats::reshape(varying = c(2:101), v.names = "Rsquared", idvar = "Model", timevar = "fold", direction = "long") %>%
stats::aov(formula = Rsquared ~ Model) %>%
summary
)
# statistical tests: Tukey
tukey_list <- Rsquared_best_total %>%
dplyr::select(-Rsquared.Mean, -Rsquared.SD) %>%
split(f = .$Dataset) %>%
map(~ (.) %>% dplyr::select(-Dataset) %>%
stats::reshape(varying = c(2:101), v.names = "Rsquared", idvar = "Model", timevar = "fold", direction = "long") %>%
rstatix::tukey_hsd(formula = Rsquared ~ Model) %>%
dplyr::mutate(contrast = paste0(.$group1,"---",.$group2),
contrast = str_split(contrast, "---"))
)
# boxplots with tukey tests (i just found out ggbetweenstats is better)
plot_list <- Rsquared_best_total %>%
dplyr::select(-Rsquared.Mean, -Rsquared.SD) %>%
split(f = .$Dataset) %>%
imap(~ (.x) %>% dplyr::select(-Dataset) %>%
stats::reshape(varying = c(2:101), v.names = "Rsquared", idvar = "Model", timevar = "fold", direction = "long") %>%
ggplot(., aes(x = Model, y = Rsquared)) +
geom_boxplot() +
theme_apa() +
ggtitle(label = .y) +
geom_signif(
comparisons = tukey_list[[.y]]$contrast, # hier zou je kunnen aanvragen om alleen glmm met ppd en smearing te doen (of misschien in Tukey test)
y_position = seq(from = max(.x[,3:102])+0.02, to = (max(.x[,3:102]) + (max(.x[,3:102]) - min(.x[,3:102]))/2), length.out = 6),
annotations = tukey_list[[.y]]$p.adj.signif
)
)
test <- Rsquared_best_total %>%
dplyr::select(-Rsquared.Mean, -Rsquared.SD) %>%
split(f = .$Dataset) %>%
map(~ (.) %>% dplyr::select(-Dataset) %>%
stats::reshape(varying = c(2:101), v.names = "Rsquared", idvar = "Model", timevar = "fold", direction = "long") %>%
stats::aov(formula = Rsquared ~ Model) %>%
TukeyHSD()
)
dunn_test(data = test[["ECLSKschool"]], formula = Rsquared ~ Model)
# data preperation T_T
{
# finds the highest Rsq for every dataset, and calculates mean.
Rsquared_best_means <- allMSElong %>%
dplyr::group_by(Model, Dataset) %>%
dplyr::mutate(Rsquared.Mean = mean(Rsquared), Rsquared.SD = sd(Rsquared)) %>%
dplyr::ungroup() %>%
dplyr::select(Model, Dataset, Rsquared.Mean, Rsquared.SD) %>%
dplyr::distinct() %>%
dplyr::mutate(dummy_Model = substr(Model, 1,3)) %>%
dplyr::group_by(Dataset, dummy_Model) %>%
dplyr::top_n(1, Rsquared.Mean) %>%
dplyr::ungroup() %>%
dplyr::select(Model, Dataset, Rsquared.Mean, Rsquared.SD) %>%
dplyr::arrange(Dataset)
# for every highest Rsq model, add every value of Rsq to the row
Rsquared_empty <- as.data.frame(matrix(NA, nrow = nrow(Rsquared_best_means), ncol = 100))
for(i in 1:nrow(Rsquared_best_means)){
tempRsquareds <- (allMSElong) %>%
dplyr::select(Model, Dataset, Rsquared) %>%
dplyr::filter(Model == as.character(sjlabelled::to_character(Rsquared_best_means[i,1])) & Dataset == as.character(to_character(Rsquared_best_means[i,2]))) %>%
dplyr::select(Rsquared) %>%
t() %>%
as_vector()
Rsquared_empty[i,] <- tempRsquareds
}
Rsquared_best_total <- cbind(Rsquared_best_means, Rsquared_empty)
}
# statistical tests: ANOVA
ANOVA_list <- Rsquared_best_total %>%
dplyr::select(-Rsquared.Mean, -Rsquared.SD) %>%
split(f = .$Dataset) %>%
map(~ (.) %>% dplyr::select(-Dataset) %>%
stats::reshape(varying = c(2:101), v.names = "Rsquared", idvar = "Model", timevar = "fold", direction = "long") %>%
stats::aov(formula = Rsquared ~ Model) %>%
summary
)
# statistical tests: Tukey
tukey_list <- Rsquared_best_total %>%
dplyr::select(-Rsquared.Mean, -Rsquared.SD) %>%
split(f = .$Dataset) %>%
map(~ (.) %>% dplyr::select(-Dataset) %>%
stats::reshape(varying = c(2:101), v.names = "Rsquared", idvar = "Model", timevar = "fold", direction = "long") %>%
rstatix::tukey_hsd(formula = Rsquared ~ Model) %>%
dplyr::mutate(contrast = paste0(.$group1,"---",.$group2),
contrast = str_split(contrast, "---"))
)
# boxplots with tukey tests (i just found out ggbetweenstats is better)
plot_list <- Rsquared_best_total %>%
dplyr::select(-Rsquared.Mean, -Rsquared.SD) %>%
split(f = .$Dataset) %>%
imap(~ (.x) %>% dplyr::select(-Dataset) %>%
stats::reshape(varying = c(2:101), v.names = "Rsquared", idvar = "Model", timevar = "fold", direction = "long") %>%
ggplot(., aes(x = Model, y = Rsquared)) +
geom_boxplot() +
theme_apa() +
ggtitle(label = .y) +
geom_signif(
comparisons = tukey_list[[.y]]$contrast, # hier zou je kunnen aanvragen om alleen glmm met ppd en smearing te doen (of misschien in Tukey test)
y_position = seq(from = max(.x[,3:102])+0.02, to = (max(.x[,3:102]) + (max(.x[,3:102]) - min(.x[,3:102]))/2), length.out = 6),
annotations = tukey_list[[.y]]$p.adj.signif
)
)
test <- Rsquared_best_total %>%
dplyr::select(-Rsquared.Mean, -Rsquared.SD) %>%
split(f = .$Dataset) %>%
map(~ (.) %>% dplyr::select(-Dataset) %>%
stats::reshape(varying = c(2:101), v.names = "Rsquared", idvar = "Model", timevar = "fold", direction = "long") %>%
stats::aov(formula = Rsquared ~ Model) %>%
TukeyHSD()
)
plot_list
install.packages("ggstatsplot")
library("ggstatsplot")
# boxplots with tukey tests (i just found out ggbetweenstats is better)
plot_list2 <- Rsquared_best_total %>%
dplyr::select(-Rsquared.Mean, -Rsquared.SD) %>%
split(f = .$Dataset) %>%
imap(~ (.x) %>% dplyr::select(-Dataset) %>%
stats::reshape(varying = c(2:101), v.names = "Rsquared", idvar = "Model", timevar = "fold", direction = "long") %>%
ggbetweenstats(
data = .,
x = Model,
y = Rsquared,
type = "parametric", # ANOVA or Kruskal-Wallis
var.equal = TRUE, # ANOVA or Welch ANOVA
plot.type = "box",
pairwise.comparisons = TRUE,
pairwise.display = "significant",
centrality.plotting = FALSE,
bf.message = FALSE,
ggtheme = theme_apa()
)
)
plot_list2
tukey_list
5.76*10^2
5.76*10^-2
test <- Rsquared_best_total %>%
dplyr::select(-Rsquared.Mean, -Rsquared.SD) %>%
split(f = .$Dataset) %>%
map(~ (.) %>% dplyr::select(-Dataset) %>%
stats::reshape(varying = c(2:101), v.names = "Rsquared", idvar = "Model", timevar = "fold", direction = "long")
)
test[[1]]
test[[1]]
Rsquared_best_total
allTreeSize
allTreeSizelong
allTreeSizelong
plot_list
allTreeSizelong
allTreeSize
test[[1]]
allTreeSizelong
allTreeSize
table1
table1
# Mean and SD Tree Sizes
table1 <- allTreeSizelong %>%
group_by(Model, Dataset) %>%
summarise(M = mean(`Tree Size`), SD = round(sd(`Tree Size`), digits = 2)) %>%
ungroup() %>%
pivot_wider(
names_from = Dataset,
names_glue = "{Dataset}.{.value}",
values_from = c(M, SD)
) %>%
dplyr::select(Model, order(names(.))) %>%
nice_table(., separate.header = TRUE, italics = seq(.),
title = c("Mean tree size and standard deviation","Table 1"))
# Mean and SD Tree Sizes
table3 <- allMSElong %>%
group_by(Model, Dataset) %>%
summarise(M = mean(Rsquared), SD = round(sd(Rsquared), digits = 2)) %>%
ungroup() %>%
pivot_wider(
names_from = Dataset,
names_glue = "{Dataset}.{.value}",
values_from = c(M, SD)
) %>%
dplyr::select(Model, order(names(.))) %>%
nice_table(., separate.header = TRUE, italics = seq(.),
title = c("Rsquared and standard deviation","Table 3"))
# Combined Tree Size and Relative MSE
table2 <- right_join(
allTreeSizelong %>%
group_by(Model) %>%
summarise(`Tree Size.M` = round(mean(`Tree Size`), digits = 2), `Tree Size.SD` = round(sd(`Tree Size`), digits = 2)) %>%
ungroup(),
relMSElong %>%
group_by(Model) %>%
summarise(`Relative MSE.M` = round(mean(`MSE`), digits = 2), `Relative MSE.SD` = round(sd(`MSE`), digits = 2)) %>%
ungroup(),
by = "Model") %>%
nice_table(., separate.header = TRUE, italics = seq(.),
title = c("Combined Tree Size and Relative MSE","Table 2"))
# Mean and SD Tree Sizes
table1 <- allTreeSizelong %>%
group_by(Model, Dataset) %>%
summarise(M = mean(`Tree Size`), SD = round(sd(`Tree Size`), digits = 2)) %>%
ungroup() %>%
pivot_wider(
names_from = Dataset,
names_glue = "{Dataset}.{.value}",
values_from = c(M, SD)
) %>%
dplyr::select(Model, order(names(.))) %>%
nice_table(., separate.header = TRUE, italics = seq(.),
title = c("Mean tree size and standard deviation","Table 1"))
# Mean and SD MSE
table3 <- allMSElong %>%
group_by(Model, Dataset) %>%
summarise(M = mean(Rsquared), SD = round(sd(Rsquared), digits = 2)) %>%
ungroup() %>%
pivot_wider(
names_from = Dataset,
names_glue = "{Dataset}.{.value}",
values_from = c(M, SD)
) %>%
dplyr::select(Model, order(names(.))) %>%
nice_table(., separate.header = TRUE, italics = seq(.),
title = c("Rsquared and standard deviation","Table 3"))
# # Combined Tree Size and Relative MSE
# table2 <- right_join(
#   allTreeSizelong %>%
#   group_by(Model) %>%
#   summarise(`Tree Size.M` = round(mean(`Tree Size`), digits = 2), `Tree Size.SD` = round(sd(`Tree Size`), digits = 2)) %>%
#   ungroup(),
#   relMSElong %>%
#   group_by(Model) %>%
#   summarise(`Relative MSE.M` = round(mean(`MSE`), digits = 2), `Relative MSE.SD` = round(sd(`MSE`), digits = 2)) %>%
#   ungroup(),
#   by = "Model") %>%
#   nice_table(., separate.header = TRUE, italics = seq(.),
#              title = c("Combined Tree Size and Relative MSE","Table 2"))
#
# # Combined Tree Size and Relative MSE
# table2 <- allMSElong %>%
#   group_by(Model) %>%
#   summarise(`Rsquared.M` = round(mean(`Rsquared`), digits = 2), `Rsquared.SD` = round(sd(`Rsquared`), digits = 2)) %>%
#   ungroup() %>%
#   nice_table(., separate.header = TRUE, italics = seq(.),
#              title = c("Combined Rsquared","Table 2"))
save_as_docx(table1, path = "Table 1.docx")
# Mean and SD Tree Sizes
table1 <- allTreeSizelong %>%
group_by(Model, Dataset) %>%
summarise(M = mean(`Tree Size`), SD = round(sd(`Tree Size`), digits = 2)) %>%
ungroup() %>%
pivot_wider(
names_from = Dataset,
names_glue = "{Dataset}.{.value}",
values_from = c(M, SD)
) %>%
dplyr::select(Model, order(names(.))) %>%
nice_table(., separate.header = TRUE, italics = seq(.),
title = c("Mean tree size and standard deviation","Table 1"))
# Mean and SD MSE
table3 <- allMSElong %>%
group_by(Model, Dataset) %>%
summarise(M = mean(Rsquared), SD = round(sd(Rsquared), digits = 2)) %>%
ungroup() %>%
pivot_wider(
names_from = Dataset,
names_glue = "{Dataset}.{.value}",
values_from = c(M, SD)
) %>%
dplyr::select(Model, order(names(.))) %>%
nice_table(., separate.header = TRUE, italics = seq(.),
title = c("Rsquared and standard deviation","Table 3"))
# # Combined Tree Size and Relative MSE
# table2 <- right_join(
#   allTreeSizelong %>%
#   group_by(Model) %>%
#   summarise(`Tree Size.M` = round(mean(`Tree Size`), digits = 2), `Tree Size.SD` = round(sd(`Tree Size`), digits = 2)) %>%
#   ungroup(),
#   relMSElong %>%
#   group_by(Model) %>%
#   summarise(`Relative MSE.M` = round(mean(`MSE`), digits = 2), `Relative MSE.SD` = round(sd(`MSE`), digits = 2)) %>%
#   ungroup(),
#   by = "Model") %>%
#   nice_table(., separate.header = TRUE, italics = seq(.),
#              title = c("Combined Tree Size and Relative MSE","Table 2"))
#
# # Combined Tree Size and Relative MSE
# table2 <- allMSElong %>%
#   group_by(Model) %>%
#   summarise(`Rsquared.M` = round(mean(`Rsquared`), digits = 2), `Rsquared.SD` = round(sd(`Rsquared`), digits = 2)) %>%
#   ungroup() %>%
#   nice_table(., separate.header = TRUE, italics = seq(.),
#              title = c("Combined Rsquared","Table 2"))
# save_as_docx(table1, path = "Table 1.docx")
# save_as_docx(table2, path = "Table 2.docx")
# save_as_docx(table3, path = "Table 3.docx")
table1
# table2
table3
# summary(allMSElong)
table1
# Mean and SD Tree Sizes
table1 <- allTreeSizelong %>%
group_by(Model, Dataset) %>%
summarise(M = mean(`Tree Size`), SD = round(sd(`Tree Size`), digits = 2)) %>%
ungroup() %>%
pivot_wider(
names_from = Dataset,
names_glue = "{Dataset}.{.value}",
values_from = c(M, SD)
) %>%
dplyr::select(Model, order(names(.)))
# Mean and SD Tree Sizes
table1 <- allTreeSizelong %>%
group_by(Model, Dataset) %>%
summarise(M = mean(`Tree Size`), SD = round(sd(`Tree Size`), digits = 2)) %>%
ungroup() %>%
pivot_wider(
names_from = Dataset,
names_glue = "{Dataset}.{.value}",
values_from = c(M, SD)
) %>%
dplyr::select(Model, order(names(.)))
View(table1)
View(Rsquared_best_total)
# Mean and SD Tree Sizes
table1 <- allTreeSizelong %>%
group_by(Model, Dataset) %>%
summarise(M = mean(`Tree Size`), SD = round(sd(`Tree Size`), digits = 2)) %>%
ungroup() %>%
pivot_wider(
names_from = Dataset,
names_glue = "{Dataset}.{.value}",
values_from = c(M, SD)
) %>%
dplyr::select(Model, order(names(.)))
table1 %>% nice_table(., separate.header = TRUE, italics = seq(.),
title = c("Mean tree size and standard deviation","Table 1"))
# Mean and SD MSE
table2 <- allMSElong %>%
group_by(Model, Dataset) %>%
summarise(M = mean(Rsquared), SD = round(sd(Rsquared), digits = 2)) %>%
ungroup() %>%
pivot_wider(
names_from = Dataset,
names_glue = "{Dataset}.{.value}",
values_from = c(M, SD)
) %>%
dplyr::select(Model, order(names(.)))
table2 %>% nice_table(., separate.header = TRUE, italics = seq(.),
title = c("Rsquared and standard deviation","Table 3"))
plot_list
plot_list
