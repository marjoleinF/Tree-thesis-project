#
# pred_babart <- predict(babart, newdata = testdat)
#
# MSE[(k-1)*10+i,2+match(ngen,ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,2+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
#
# tel
}
foreach(ngen = ngensizes, .packages = "glmertree", .verbose = TRUE) %dopar% {
# .GlobalEnv$ngen <- ngen
# for(ngen in ngensizes){
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
dim(surr_mlbart)
# babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
#                  data = surr_mlbart, weights = rep(1/ngen, times = nrow(surr_mlbart)))
#
# pred_babart <- predict(babart, newdata = testdat)
#
# MSE[(k-1)*10+i,2+match(ngen,ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,2+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
#
# tel
}
foreach(ngen = ngensizes, .packages = "glmertree", .verbose = TRUE) %dopar% {
# .GlobalEnv$ngen <- ngen
# for(ngen in ngensizes){
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
dim(surr_mlbart)
babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
data = surr_mlbart, weights = rep(1/ngen, times = nrow(surr_mlbart)))
# pred_babart <- predict(babart, newdata = testdat)
#
# MSE[(k-1)*10+i,2+match(ngen,ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,2+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
#
# tel
}
foreach(ngen = ngensizes, .packages = "glmertree", .verbose = TRUE) %dopar% {
# .GlobalEnv$ngen <- ngen
# for(ngen in ngensizes){
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
.GlobalEnv$ngen <- ngen
babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
data = surr_mlbart, weights = rep(1/ngen, times = nrow(surr_mlbart)))
# pred_babart <- predict(babart, newdata = testdat)
#
# MSE[(k-1)*10+i,2+match(ngen,ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,2+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
#
# tel
}
foreach(ngen = ngensizes, .packages = "glmertree", .verbose = TRUE) %dopar% {
# .GlobalEnv$ngen <- ngen
# for(ngen in ngensizes){
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
.GlobalEnv$ngen <- ngen
.GlobalEnv$surr_mlbart <- surr_mlbart
babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
data = surr_mlbart, weights = rep(1/ngen, times = nrow(surr_mlbart)))
# pred_babart <- predict(babart, newdata = testdat)
#
# MSE[(k-1)*10+i,2+match(ngen,ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,2+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
#
# tel
}
foreach(ngen = ngensizes, .packages = "glmertree", .verbose = TRUE) %dopar% {
# .GlobalEnv$ngen <- ngen
# for(ngen in ngensizes){
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
.GlobalEnv$ngen <- ngen
.GlobalEnv$surr_mlbart <- surr_mlbart
babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
data = surr_mlbart, weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat)
#
# MSE[(k-1)*10+i,2+match(ngen,ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,2+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
#
# tel
}
# fit BaBart GLMM trees with different sizes of Ngen
foreach(ngen = ngensizes, .packages = "glmertree", .verbose = TRUE) %dopar% {
# for(ngen in ngensizes){
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
.GlobalEnv$ngen <- ngen
.GlobalEnv$surr_mlbart <- surr_mlbart
babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
data = surr_mlbart, weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat)
MSE[(k-1)*10+i,2+match(ngen,ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
tree_size[(k-1)*10+i,2+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
tel
}
k
i
(k-1)*10+i
2+match(ngen,ngensizes)
ngen
ngensizes
# fit BaBart GLMM trees with different sizes of Ngen
foreach(ngen = ngensizes, .packages = "glmertree", .verbose = TRUE) %dopar% {
# for(ngen in ngensizes){
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
.GlobalEnv$ngen <- ngen
.GlobalEnv$surr_mlbart <- surr_mlbart
babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
data = surr_mlbart, weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat)
mean((testdat$unsafe - pred_babart)^2)
MSE[(k-1)*10+i,2+match(ngen,ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,2+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
#
# tel
}
# fit BaBart GLMM trees with different sizes of Ngen
foreach(ngen = ngensizes, .packages = "glmertree", .combine = "c", .verbose = TRUE) %dopar% {
# for(ngen in ngensizes){
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
.GlobalEnv$ngen <- ngen
.GlobalEnv$surr_mlbart <- surr_mlbart
babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
data = surr_mlbart, weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat)
mean((testdat$unsafe - pred_babart)^2)
MSE[(k-1)*10+i,2+match(ngen,ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,2+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
#
# tel
}
# fit BaBart GLMM trees with different sizes of Ngen
foreach(ngen = ngensizes, .packages = "glmertree", .export = c("MSE", "tree_size"), .verbose = TRUE) %dopar% {
# for(ngen in ngensizes){
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
.GlobalEnv$ngen <- ngen
.GlobalEnv$surr_mlbart <- surr_mlbart
babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
data = surr_mlbart, weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat)
# mean((testdat$unsafe - pred_babart)^2)
MSE[(k-1)*10+i,2+match(ngen,ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
tree_size[(k-1)*10+i,2+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
#
# tel
}
# fit BaBart GLMM trees with different sizes of Ngen
foreach(ngen = ngensizes, .packages = "glmertree", .export = c("MSE", "tree_size"), .verbose = TRUE) %dopar% {
# for(ngen in ngensizes){
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
.GlobalEnv$ngen <- ngen
.GlobalEnv$surr_mlbart <- surr_mlbart
babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
data = surr_mlbart, weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat)
list(mean((testdat$unsafe - pred_babart)^2),
(length(babart$tree)-1)/2)
# MSE[(k-1)*10+i,2+match(ngen,ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,2+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
}
# fit BaBart GLMM trees with different sizes of Ngen
foreach(ngen = ngensizes, .packages = "glmertree", .export = c("MSE", "tree_size"), .verbose = TRUE) %dopar% {
# for(ngen in ngensizes){
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
.GlobalEnv$ngen <- ngen
.GlobalEnv$surr_mlbart <- surr_mlbart
babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
data = surr_mlbart, weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat)
# list(mean((testdat$unsafe - pred_babart)^2),
#      (length(babart$tree)-1)/2)
# MSE[(k-1)*10+i,2+match(ngen,ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,2+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
}
# fit BaBart GLMM trees with different sizes of Ngen
foreach(ngen = ngensizes, .packages = "glmertree", .verbose = TRUE) %dopar% {
# for(ngen in ngensizes){
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
.GlobalEnv$ngen <- ngen
.GlobalEnv$surr_mlbart <- surr_mlbart
babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
data = surr_mlbart, weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat)
# list(mean((testdat$unsafe - pred_babart)^2),
#      (length(babart$tree)-1)/2)
# MSE[(k-1)*10+i,2+match(ngen,ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,2+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
}
# fit BaBart GLMM trees with different sizes of Ngen
foreach(ngen = ngensizes, .packages = "glmertree", .verbose = TRUE) %dopar% {
# for(ngen in ngensizes){
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
.GlobalEnv$ngen <- ngen
.GlobalEnv$surr_mlbart <- surr_mlbart
babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
data = surr_mlbart, weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat)
list(mean((testdat$unsafe - pred_babart)^2),
(length(babart$tree)-1)/2)
# MSE[(k-1)*10+i,2+match(ngen,ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,2+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
}
# fit BaBart GLMM trees with different sizes of Ngen
foreach(ngen = ngensizes, .packages = "glmertree", .verbose = TRUE) %dopar% {
# for(ngen in ngensizes){
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
.GlobalEnv$ngen <- ngen
.GlobalEnv$surr_mlbart <- surr_mlbart
babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
data = surr_mlbart, weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat)
c(mean((testdat$unsafe - pred_babart)^2),
(length(babart$tree)-1)/2)
# MSE[(k-1)*10+i,2+match(ngen,ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,2+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
}
system.time(
# fit BaBart GLMM trees with different sizes of Ngen
foreach(ngen = ngensizes, .packages = "glmertree", .verbose = TRUE) %dopar% {
# for(ngen in ngensizes){
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
.GlobalEnv$ngen <- ngen
.GlobalEnv$surr_mlbart <- surr_mlbart
babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
data = surr_mlbart, weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat)
c(mean((testdat$unsafe - pred_babart)^2),
(length(babart$tree)-1)/2)
# MSE[(k-1)*10+i,2+match(ngen,ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,2+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
}
)
system.time(
# fit BaBart GLMM trees with different sizes of Ngen
foreach(ngen = ngensizes, .packages = "glmertree", .verbose = TRUE) %do% {
# for(ngen in ngensizes){
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
.GlobalEnv$ngen <- ngen
.GlobalEnv$surr_mlbart <- surr_mlbart
babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
data = surr_mlbart, weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat)
c(mean((testdat$unsafe - pred_babart)^2),
(length(babart$tree)-1)/2)
# MSE[(k-1)*10+i,2+match(ngen,ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,2+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
}
)
# fit BaBart GLMM trees with different sizes of Ngen
babart_MSE_treesize <- foreach(ngen = ngensizes, .packages = "glmertree", .verbose = TRUE) %dopar% {
# for(ngen in ngensizes){
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
.GlobalEnv$ngen <- ngen
.GlobalEnv$surr_mlbart <- surr_mlbart
babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
data = surr_mlbart, weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat)
c(mean((testdat$unsafe - pred_babart)^2),
(length(babart$tree)-1)/2)
# MSE[(k-1)*10+i,2+match(ngen,ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,2+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
}
babart_MSE_treesize
for(ngen in ngensizes){
MSE[(k-1)*10+i,2+match(ngen,ngensizes)] <- babart_MSE_treesize[[match(ngen,ngensizes)]][1]
tree_size[(k-1)*10+i,2+match(ngen,ngensizes)] <- babart_MSE_treesize[[match(ngen,ngensizes)]][2]
}
system.time(
# foreach(k = 1:nreps, .packages = (c("dbarts","glmertree"))) %dopar% {
# nfolds <- 10
# nreps <- 10
# ngensizes <- c(1,2)
# set.seed(42)
# gendata_bay <- function(data, PPD, n_gen){
#   if(nrow(data) != ncol(PPD)){stop("Amount of observations in PPD is different from data")}
#   index_gen <- sample.int(n = nrow(data), size = n_gen, replace = TRUE)
#   x_gen <- data[index_gen,]
#   y_gen <- sapply(index_gen, function(i) sample(x = PPD[,i], size = 1))
#   return(cbind(x_gen, y_gen))
# }
for (k in 1:nreps){
fold_ids <- sample(rep(1:nfolds, times = ceiling(nrow(data)/nfolds)), size = nrow(data), replace = FALSE)
for (i in 1:nfolds){
traindat <- data[fold_ids != i, ]
testdat <- data[fold_ids == i, ]
# # Fit a regualar GLMM tree
# glmtree <- lmertree(unsafe ~ 1 | (1|street) | age + sex + economic + crowded,
#                  data = traindat)
#
# pred_glmtree <- predict(glmtree, newdata = testdat)
#
# MSE[(k-1)*10+i,1] <- mean((testdat$unsafe - pred_glmtree)^2)
# tree_size[(k-1)*10+i,1] <- (length(glmtree$tree)-1)/2
# fit multilevel BART
Mbart <- rbart_vi(unsafe ~ age + sex + economic + crowded,
data = traindat, group.by = traindat$street,
test = testdat, group.by.test = testdat$street,
n.trees = 100, keepTrees = TRUE, combineChains = TRUE, seed = 42)
posterior <- Mbart$yhat.train
MSE[(k-1)*10+i,2] <- mean((testdat$unsafe - Mbart$yhat.test.mean)^2)
# fit BaBart GLMM trees with different sizes of Ngen using parralel processing
babart_MSE_treesize <- foreach(ngen = ngensizes, .packages = "glmertree", .verbose = TRUE) %dopar% {
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
.GlobalEnv$ngen <- ngen
.GlobalEnv$surr_mlbart <- surr_mlbart
babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
data = surr_mlbart, weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat)
c(mean((testdat$unsafe - pred_babart)^2),
(length(babart$tree)-1)/2)
}
# stores the values in the list
for(ngen in ngensizes){
MSE[(k-1)*10+i,2+match(ngen,ngensizes)] <- babart_MSE_treesize[[match(ngen,ngensizes)]][1]
tree_size[(k-1)*10+i,2+match(ngen,ngensizes)] <- babart_MSE_treesize[[match(ngen,ngensizes)]][2]
}
tel <- tel + 1
print(paste0("[",round((tel)/(nreps*nfolds)*100),"%]"))
}
}
)
set.seed(42)
nfolds <- 10
nreps <- 2
ngensizes <- c(1,4)
tel <- 0
tree_size <- MSE <- as.data.frame(matrix(data = NA, nrow = nfolds*nreps, ncol = 2 + length(ngensizes)))
colnames(tree_size) <- colnames(MSE) <- c("GLMM_tree","Bart",paste0("BaBart_N*",ngensizes))
rownames(tree_size) <- rownames(MSE) <- paste0("rep",sort(rep(1:nreps, times = nfolds)),"_fold",rep(1:nfolds, times = nreps))
cl <- makeCluster(6)
registerDoParallel(cl)
system.time(
# foreach(k = 1:nreps, .packages = (c("dbarts","glmertree"))) %dopar% {
# nfolds <- 10
# nreps <- 10
# ngensizes <- c(1,2)
# set.seed(42)
# gendata_bay <- function(data, PPD, n_gen){
#   if(nrow(data) != ncol(PPD)){stop("Amount of observations in PPD is different from data")}
#   index_gen <- sample.int(n = nrow(data), size = n_gen, replace = TRUE)
#   x_gen <- data[index_gen,]
#   y_gen <- sapply(index_gen, function(i) sample(x = PPD[,i], size = 1))
#   return(cbind(x_gen, y_gen))
# }
for (k in 1:nreps){
fold_ids <- sample(rep(1:nfolds, times = ceiling(nrow(data)/nfolds)), size = nrow(data), replace = FALSE)
for (i in 1:nfolds){
traindat <- data[fold_ids != i, ]
testdat <- data[fold_ids == i, ]
# # Fit a regualar GLMM tree
# glmtree <- lmertree(unsafe ~ 1 | (1|street) | age + sex + economic + crowded,
#                  data = traindat)
#
# pred_glmtree <- predict(glmtree, newdata = testdat)
#
# MSE[(k-1)*10+i,1] <- mean((testdat$unsafe - pred_glmtree)^2)
# tree_size[(k-1)*10+i,1] <- (length(glmtree$tree)-1)/2
# fit multilevel BART
Mbart <- rbart_vi(unsafe ~ age + sex + economic + crowded,
data = traindat, group.by = traindat$street,
test = testdat, group.by.test = testdat$street,
n.trees = 100, keepTrees = TRUE, combineChains = TRUE, seed = 42)
posterior <- Mbart$yhat.train
MSE[(k-1)*10+i,2] <- mean((testdat$unsafe - Mbart$yhat.test.mean)^2)
# fit BaBart GLMM trees with different sizes of Ngen using parralel processing
babart_MSE_treesize <- foreach(ngen = ngensizes, .packages = "glmertree") %do% {
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
.GlobalEnv$ngen <- ngen # some weird parralel processing stuff
.GlobalEnv$surr_mlbart <- surr_mlbart # some weird parralel processing stuff
babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
data = surr_mlbart, weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat)
c(mean((testdat$unsafe - pred_babart)^2),
(length(babart$tree)-1)/2)
}
# stores the values in the list
for(ngen in ngensizes){
MSE[(k-1)*10+i,2+match(ngen,ngensizes)] <- babart_MSE_treesize[[match(ngen,ngensizes)]][1]
tree_size[(k-1)*10+i,2+match(ngen,ngensizes)] <- babart_MSE_treesize[[match(ngen,ngensizes)]][2]
}
tel <- tel + 1
print(paste0("[",round((tel)/(nreps*nfolds)*100),"%]"))
}
}
)
stopCluster(cl)
apply(X = MSE, MARGIN = 2, FUN = mean)
apply(X = MSE, MARGIN = 2, FUN = sd)
apply(X = tree_size, MARGIN = 2, FUN = mean)
apply(X = tree_size, MARGIN = 2, FUN = sd)
parallel::detectCores()
set.seed(42)
nfolds <- 10
nreps <- 10
ngensizes <- c(1:10)
tel <- 0
tree_size <- MSE <- as.data.frame(matrix(data = NA, nrow = nfolds*nreps, ncol = 2 + length(ngensizes)))
colnames(tree_size) <- colnames(MSE) <- c("GLMM_tree","Bart",paste0("BaBart_N*",ngensizes))
rownames(tree_size) <- rownames(MSE) <- paste0("rep",sort(rep(1:nreps, times = nfolds)),"_fold",rep(1:nfolds, times = nreps))
cl <- makeCluster(detectCores()-1)
registerDoParallel(cl)
system.time(
# foreach(k = 1:nreps, .packages = (c("dbarts","glmertree"))) %dopar% {
for (k in 1:nreps){
fold_ids <- sample(rep(1:nfolds, times = ceiling(nrow(data)/nfolds)), size = nrow(data), replace = FALSE)
for (i in 1:nfolds){
traindat <- data[fold_ids != i, ]
testdat <- data[fold_ids == i, ]
# Fit a regualar GLMM tree
glmtree <- lmertree(unsafe ~ 1 | (1|street) | age + sex + economic + crowded,
data = traindat)
pred_glmtree <- predict(glmtree, newdata = testdat)
MSE[(k-1)*10+i,1] <- mean((testdat$unsafe - pred_glmtree)^2)
tree_size[(k-1)*10+i,1] <- (length(glmtree$tree)-1)/2
# fit multilevel BART
Mbart <- rbart_vi(unsafe ~ age + sex + economic + crowded,
data = traindat, group.by = traindat$street,
test = testdat, group.by.test = testdat$street,
n.trees = 100, keepTrees = TRUE, combineChains = TRUE, seed = 42)
posterior <- Mbart$yhat.train
MSE[(k-1)*10+i,2] <- mean((testdat$unsafe - Mbart$yhat.test.mean)^2)
# fit BaBart GLMM trees with different sizes of Ngen using parralel processing
babart_MSE_treesize <- foreach(ngen = ngensizes, .packages = "glmertree") %do% {
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
.GlobalEnv$ngen <- ngen # some weird parralel processing stuff
.GlobalEnv$surr_mlbart <- surr_mlbart # some weird parralel processing stuff
babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
data = surr_mlbart, weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat)
c(mean((testdat$unsafe - pred_babart)^2),
(length(babart$tree)-1)/2)
}
# stores the values in the list
for(ngen in ngensizes){
MSE[(k-1)*10+i,2+match(ngen,ngensizes)] <- babart_MSE_treesize[[match(ngen,ngensizes)]][1]
tree_size[(k-1)*10+i,2+match(ngen,ngensizes)] <- babart_MSE_treesize[[match(ngen,ngensizes)]][2]
}
tel <- tel + 1
print(paste0("[",round((tel)/(nreps*nfolds)*100),"%]"))
}
}
)
stopCluster(cl)
apply(X = MSE, MARGIN = 2, FUN = mean)
apply(X = MSE, MARGIN = 2, FUN = sd)
apply(X = tree_size, MARGIN = 2, FUN = mean)
apply(X = tree_size, MARGIN = 2, FUN = sd)
MSE_weighted_par_1to10 <- MSE
tree_size_weighted_par_1to10 <- tree_size
# MSE_weighted <- MSE
# tree_size_weighted <- tree_size
#
# saveRDS(MSE_weighted, file = "MSE_weighted.Rda")
# saveRDS(tree_size_weighted, file = "tree_size_weighted.Rda")
MSE_weighted_par_1to10 <- MSE
tree_size_weighted_par_1to10 <- tree_size
saveRDS(MSE_weighted_par_1to10, file = "MSE_weighted.Rda")
saveRDS(tree_size_weighted_par_1to10, file = "tree_size_weighted.Rda")
plot(MSE)
scatter(MSE)
dotchart(MSE)
library(tidyverse)
library(tidyverse)
MSE_long <- MSE
MSE_long <- MSE %>% gather()
View(MSE_long)
MSE_long <- MSE %>% gather(key = "Method", value = "MSE")
scatter.smooth(MSE_long)
loess.smooth(MSE_long)
scatter.smooth
scatter.smooth(MSE_long)
scatter.smooth(MSE_long, y = unique(MSE_long$Method))
scatter.smooth(MSE_long, x = unique(MSE_long$Method))
scatter.smooth(y = MSE_long, x = unique(MSE_long$Method))
scatter.smooth(MSE_long, x = MSE_long$Method)
scatter.smooth(MSE_long, xlab = MSE_long$Method)
scatter.smooth(MSE_long, xlab = unique(MSE_long$Method))
scatter.smooth(MSE_long, x = unique(MSE_long$Method))
scatter.smooth(MSE_long, x = (MSE_long$Method))
scatter.smooth(MSE_long)
MSE_long$Method <- as.factor(MSE_long$Method)
scatter.smooth(MSE_long)
scatter.smooth(MSE_long, x = MSE_long$Method)
scatter.smooth(MSE_long, x = MSE_long)
scatter.smooth(MSE_long)
plot(MSE_long)
boxplot(MSE_long)
boxplot(MSE)
boxplot(MSE, horizontal = TRUE)
boxplot(MSE, horizontal = TRUE, las = 2)
boxplot(MSE, horizontal = TRUE, las = 2, mar = c(5.1, 6.1, 4.1, 2.1))
boxplot(MSE, horizontal = TRUE, las = 2, mar = c(5.1, 8.1, 4.1, 2.1))
boxplot(MSE, horizontal = TRUE, las = 2, mar = c(5.1, 100.1, 4.1, 2.1))
boxplot(MSE, horizontal = TRUE, las = 2, mar = c(5.1, 100.1, 4.1, 2.1))
boxplot(MSE, horizontal = TRUE, las = 2, mar = c(5.1, 4.1, 4.1, 2.1))
boxplot(MSE, horizontal = TRUE, las = 2, mar = c(5.1, 4.1, 4.1, 2.1))
boxplot(MSE, horizontal = TRUE, las = 2, mar = c(10.1, 4.1, 4.1, 2.1))
par(mar = c(5.1, 6.1, 4.1, 2.1))
boxplot(MSE, horizontal = TRUE, las = 2)
par(mar = c(5.1, 6.1, 4.1, 2.1))
boxplot(MSE, horizontal = TRUE, las = 2)
par(mar = c(5.1, 7.1, 4.1, 2.1))
boxplot(MSE, horizontal = TRUE, las = 2)
par(mar = c(5.1, 7.1, 4.1, 2.1))
boxplot(MSE, horizontal = F, las = 2)
par(mar = c(8.1, 4.1, 4.1, 2.1))
boxplot(MSE, horizontal = F, las = 2)
par(mar = c(7.1, 4.1, 4.1, 2.1))
boxplot(MSE, horizontal = F, las = 2)
abline(h = median(MSE$Bart))
par(mar = c(7.1, 4.1, 4.1, 2.1))
boxplot(MSE, horizontal = F, las = 2)
abline(h = median(MSE$Bart))
