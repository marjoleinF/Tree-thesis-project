# Mbart <- rbart_vi(unsafe ~ age + sex + economic + crowded,
#                   data = surr_mlbart, group.by = surr_mlbart$street,
#                   combineChains = TRUE, seed = 42, verbose = FALSE)
#
# y_gen <- Mbart$yhat.train.mean
#
# surr_mlbart <- cbind(surr_mlbart, y_gen)
# ###### Smearing Weighted ######
# babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
#                data = surr_mlbart,
#                weights = rep(1/ngen, times = nrow(surr_mlbart)))
#
# pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
# MSE[(k-1)*10+i,3+length(ngensizes)+match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,3+length(ngensizes)+match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- (length(babart$tree)-1)/2
##### Smearing NOT Weighted ######
if(ngen != 1){
# babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
#                data = surr_mlbart)
# pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
# MSE[(k-1)*10+i,2+length(ngensizes)*2+match(ngen,ngensizes)+
#       (match(palt, palts)-1)*length(ngensizes)+nrow(BaSmear_design)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,2+length(ngensizes)*2+match(ngen,ngensizes)+
#             (match(palt, palts)-1)*length(ngensizes)+nrow(BaSmear_design)] <- (length(babart$tree)-1)/2
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,
2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*length(ngensizes)] <- 1
tree_size[(k-1)*10+i,
2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*length(ngensizes)+nrow(BaSmear_design)] <- 2
}
}
}
tel <- tel + 1
print(paste0("[",round((tel)/(nreps*nfolds)*100),"%]"))
}
}
)
2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*length(ngensizes)
2+length(ngensizes)*2+nrow(BaSmear_design)
(match(palt, palts)-1)*length(ngensizes)
set.seed(42)
data = read_sav(file.path(here(),"Project David","Safety.sav"))
data <- data[1:100,]
set.seed(42)
nfolds <- 10
nreps <- 10
ngensizes <- c(1,5,10)
palts <- c(0, 0.25, 0.5)
BaSmear_design <- expand.grid(ngensizes, palts)
tel <- 0
use_weights <- TRUE
baygen <- TRUE
# ## Create objects for saving results
tree_size <- MSE <- as.data.frame(matrix(data = NA,
nrow = nfolds*nreps,
ncol = 3 +
length(ngensizes) +
nrow(BaSmear_design) +
length(ngensizes[ngensizes != 1]) +
nrow(BaSmear_design[!(BaSmear_design[,1] %in% 1),])))
colnames(tree_size) <- colnames(MSE) <- c("GLMM_tree", "Bart", "BA",
paste0("BaBart_N*",ngensizes),
paste0("Smearing_N*",BaSmear_design[,1], "_palt=",BaSmear_design[,2]),
paste0("BaBart_N*", ngensizes[ngensizes != 1], "_Nw"),
paste0("Smearing_N*",BaSmear_design[!(BaSmear_design[,1] %in% 1),][,1], "_palt=",
BaSmear_design[!(BaSmear_design[,1] %in% 1),][,2], "_Nw"))
system.time(
for (k in 1:nreps){
# Generate train-test splits
fold_ids <- sample(rep(1:nfolds, times = ceiling(nrow(data)/nfolds)),
size = nrow(data), replace = FALSE)
for (i in 1:nfolds){
# train-test split
traindat <- data[fold_ids != i, ]
testdat <- data[fold_ids == i, ]
# Check whether all factor levels in test are also in train, else omit from test
for (fact in c("street")) {
levs <- unique(testdat[ , fact]) %in% unique(traindat[ , fact])
if (!all(levs)) {
testdat <- testdat[-which(!testdat[ , fact] %in% unique(testdat[ , fact])[levs]), ]
print(paste0("Levels of fold ", i, " omitted from test data: ",
unique(testdat[ , fact])[!levs]))
}
}
# ###### Fit a regualar GLMM tree ######
# glmtree <- lmertree(unsafe ~ 1 | (1|street) | age + sex + economic + crowded,
#                  data = traindat)
#
# pred_glmtree <- predict(glmtree, newdata = testdat, re.form = ~0)
#
# MSE[(k-1)*10+i,1] <- mean((testdat$unsafe - pred_glmtree)^2)
# tree_size[(k-1)*10+i,1] <- (length(glmtree$tree)-1)/2
#
# ######  fit multilevel BART ######
# Mbart <- rbart_vi(unsafe ~ age + sex + economic + crowded,
#    data = traindat, group.by = traindat$street,
#    test = testdat, group.by.test = testdat$street,
#    combineChains = TRUE, seed = 42, verbose = FALSE)
#
# posterior <- Mbart$yhat.train
#
# MSE[(k-1)*10+i,2] <- mean((testdat$unsafe - Mbart$yhat.test.mean)^2)
# fit BaBart GLMM trees with different sizes of Ngen using Baygen and smearing
for(ngen in ngensizes){
# Bayesian data generation
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
# ###### Baygen Weighted ######
# babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
#                data = surr_mlbart,
#                weights = rep(1/ngen, times = nrow(surr_mlbart)))
#
# pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
# MSE[(k-1)*10+i,3+match(ngen,ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,3+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
# ###### Baygen NOT Weighted ######
# if(ngen != 1){
#   babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
#                  data = surr_mlbart)
#
#   pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
#   MSE[(k-1)*10+i,2+match(ngen,ngensizes)+length(ngensizes)+nrow(BaSmear_design)] <- mean((testdat$unsafe - pred_babart)^2)# :s
#   tree_size[(k-1)*10+i,2+match(ngen,ngensizes)+length(ngensizes)+nrow(BaSmear_design)] <- (length(babart$tree)-1)/2
# }
# smearing HIER MOET DE CLUSTERSTRUCTUUR NOG WORDEN BEHOUDEN
for(palt in palts){
# surr_mlbart <- gendata_smr(traindat, palt, ngen * nrow(traindat), keeps = c("street"))
# Mbart <- rbart_vi(unsafe ~ age + sex + economic + crowded,
#                   data = surr_mlbart, group.by = surr_mlbart$street,
#                   combineChains = TRUE, seed = 42, verbose = FALSE)
#
# y_gen <- Mbart$yhat.train.mean
#
# surr_mlbart <- cbind(surr_mlbart, y_gen)
# ###### Smearing Weighted ######
# babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
#                data = surr_mlbart,
#                weights = rep(1/ngen, times = nrow(surr_mlbart)))
#
# pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
# MSE[(k-1)*10+i,3+length(ngensizes)+match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,3+length(ngensizes)+match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- (length(babart$tree)-1)/2
##### Smearing NOT Weighted ######
if(ngen != 1){
# babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
#                data = surr_mlbart)
# pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
# MSE[(k-1)*10+i,2+length(ngensizes)*2+match(ngen,ngensizes)+
#       (match(palt, palts)-1)*length(ngensizes)+nrow(BaSmear_design)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,2+length(ngensizes)*2+match(ngen,ngensizes)+
#             (match(palt, palts)-1)*length(ngensizes)+nrow(BaSmear_design)] <- (length(babart$tree)-1)/2
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,
2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*length(ngensizes)+match(ngen, ngensizes)-1] <- 1
tree_size[(k-1)*10+i,
2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*length(ngensizes)+nrow(BaSmear_design)+match(ngen, ngensizes)-1] <- 2
}
}
}
tel <- tel + 1
print(paste0("[",round((tel)/(nreps*nfolds)*100),"%]"))
}
}
)
View(tree_size)
set.seed(42)
data = read_sav(file.path(here(),"Project David","Safety.sav"))
data <- data[1:100,]
set.seed(42)
nfolds <- 10
nreps <- 10
ngensizes <- c(1,5,10)
palts <- c(0, 0.25, 0.5)
BaSmear_design <- expand.grid(ngensizes, palts)
tel <- 0
use_weights <- TRUE
baygen <- TRUE
# ## Create objects for saving results
tree_size <- MSE <- as.data.frame(matrix(data = NA,
nrow = nfolds*nreps,
ncol = 3 +
length(ngensizes) +
nrow(BaSmear_design) +
length(ngensizes[ngensizes != 1]) +
nrow(BaSmear_design[!(BaSmear_design[,1] %in% 1),])))
colnames(tree_size) <- colnames(MSE) <- c("GLMM_tree", "Bart", "BA",
paste0("BaBart_N*",ngensizes),
paste0("Smearing_N*",BaSmear_design[,1], "_palt=",BaSmear_design[,2]),
paste0("BaBart_N*", ngensizes[ngensizes != 1], "_Nw"),
paste0("Smearing_N*",BaSmear_design[!(BaSmear_design[,1] %in% 1),][,1], "_palt=",
BaSmear_design[!(BaSmear_design[,1] %in% 1),][,2], "_Nw"))
system.time(
for (k in 1:nreps){
# Generate train-test splits
fold_ids <- sample(rep(1:nfolds, times = ceiling(nrow(data)/nfolds)),
size = nrow(data), replace = FALSE)
for (i in 1:nfolds){
# train-test split
traindat <- data[fold_ids != i, ]
testdat <- data[fold_ids == i, ]
# Check whether all factor levels in test are also in train, else omit from test
for (fact in c("street")) {
levs <- unique(testdat[ , fact]) %in% unique(traindat[ , fact])
if (!all(levs)) {
testdat <- testdat[-which(!testdat[ , fact] %in% unique(testdat[ , fact])[levs]), ]
print(paste0("Levels of fold ", i, " omitted from test data: ",
unique(testdat[ , fact])[!levs]))
}
}
# ###### Fit a regualar GLMM tree ######
# glmtree <- lmertree(unsafe ~ 1 | (1|street) | age + sex + economic + crowded,
#                  data = traindat)
#
# pred_glmtree <- predict(glmtree, newdata = testdat, re.form = ~0)
#
# MSE[(k-1)*10+i,1] <- mean((testdat$unsafe - pred_glmtree)^2)
# tree_size[(k-1)*10+i,1] <- (length(glmtree$tree)-1)/2
#
# ######  fit multilevel BART ######
# Mbart <- rbart_vi(unsafe ~ age + sex + economic + crowded,
#    data = traindat, group.by = traindat$street,
#    test = testdat, group.by.test = testdat$street,
#    combineChains = TRUE, seed = 42, verbose = FALSE)
#
# posterior <- Mbart$yhat.train
#
# MSE[(k-1)*10+i,2] <- mean((testdat$unsafe - Mbart$yhat.test.mean)^2)
# fit BaBart GLMM trees with different sizes of Ngen using Baygen and smearing
for(ngen in ngensizes){
# Bayesian data generation
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
# ###### Baygen Weighted ######
# babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
#                data = surr_mlbart,
#                weights = rep(1/ngen, times = nrow(surr_mlbart)))
#
# pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
# MSE[(k-1)*10+i,3+match(ngen,ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,3+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
# ###### Baygen NOT Weighted ######
# if(ngen != 1){
#   babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
#                  data = surr_mlbart)
#
#   pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
#   MSE[(k-1)*10+i,2+match(ngen,ngensizes)+length(ngensizes)+nrow(BaSmear_design)] <- mean((testdat$unsafe - pred_babart)^2)# :s
#   tree_size[(k-1)*10+i,2+match(ngen,ngensizes)+length(ngensizes)+nrow(BaSmear_design)] <- (length(babart$tree)-1)/2
# }
# smearing HIER MOET DE CLUSTERSTRUCTUUR NOG WORDEN BEHOUDEN
for(palt in palts){
# surr_mlbart <- gendata_smr(traindat, palt, ngen * nrow(traindat), keeps = c("street"))
# Mbart <- rbart_vi(unsafe ~ age + sex + economic + crowded,
#                   data = surr_mlbart, group.by = surr_mlbart$street,
#                   combineChains = TRUE, seed = 42, verbose = FALSE)
#
# y_gen <- Mbart$yhat.train.mean
#
# surr_mlbart <- cbind(surr_mlbart, y_gen)
# ###### Smearing Weighted ######
# babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
#                data = surr_mlbart,
#                weights = rep(1/ngen, times = nrow(surr_mlbart)))
#
# pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
# MSE[(k-1)*10+i,3+length(ngensizes)+match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,3+length(ngensizes)+match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- (length(babart$tree)-1)/2
##### Smearing NOT Weighted ######
if(ngen != 1){
# babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
#                data = surr_mlbart)
# pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
# MSE[(k-1)*10+i,2+length(ngensizes)*2+match(ngen,ngensizes)+
#       (match(palt, palts)-1)*length(ngensizes)+nrow(BaSmear_design)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,2+length(ngensizes)*2+match(ngen,ngensizes)+
#             (match(palt, palts)-1)*length(ngensizes)+nrow(BaSmear_design)] <- (length(babart$tree)-1)/2
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE      [(k-1)*10+i,2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*length(ngensizes)+match(ngen, ngensizes)-1] <- 1
tree_size[(k-1)*10+i,2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*length(ngensizes)+match(ngen, ngensizes)-1] <- 2
}
}
}
tel <- tel + 1
print(paste0("[",round((tel)/(nreps*nfolds)*100),"%]"))
}
}
)
set.seed(42)
data = read_sav(file.path(here(),"Project David","Safety.sav"))
data <- data[1:100,]
set.seed(42)
nfolds <- 10
nreps <- 10
ngensizes <- c(1,5,10)
palts <- c(0, 0.25, 0.5)
BaSmear_design <- expand.grid(ngensizes, palts)
tel <- 0
use_weights <- TRUE
baygen <- TRUE
# ## Create objects for saving results
tree_size <- MSE <- as.data.frame(matrix(data = NA,
nrow = nfolds*nreps,
ncol = 3 +
length(ngensizes) +
nrow(BaSmear_design) +
length(ngensizes[ngensizes != 1]) +
nrow(BaSmear_design[!(BaSmear_design[,1] %in% 1),])))
colnames(tree_size) <- colnames(MSE) <- c("GLMM_tree", "Bart", "BA",
paste0("BaBart_N*",ngensizes),
paste0("Smearing_N*",BaSmear_design[,1], "_palt=",BaSmear_design[,2]),
paste0("BaBart_N*", ngensizes[ngensizes != 1], "_Nw"),
paste0("Smearing_N*",BaSmear_design[!(BaSmear_design[,1] %in% 1),][,1], "_palt=",
BaSmear_design[!(BaSmear_design[,1] %in% 1),][,2], "_Nw"))
system.time(
for (k in 1:nreps){
# Generate train-test splits
fold_ids <- sample(rep(1:nfolds, times = ceiling(nrow(data)/nfolds)),
size = nrow(data), replace = FALSE)
for (i in 1:nfolds){
# train-test split
traindat <- data[fold_ids != i, ]
testdat <- data[fold_ids == i, ]
# Check whether all factor levels in test are also in train, else omit from test
for (fact in c("street")) {
levs <- unique(testdat[ , fact]) %in% unique(traindat[ , fact])
if (!all(levs)) {
testdat <- testdat[-which(!testdat[ , fact] %in% unique(testdat[ , fact])[levs]), ]
print(paste0("Levels of fold ", i, " omitted from test data: ",
unique(testdat[ , fact])[!levs]))
}
}
# ###### Fit a regualar GLMM tree ######
# glmtree <- lmertree(unsafe ~ 1 | (1|street) | age + sex + economic + crowded,
#                  data = traindat)
#
# pred_glmtree <- predict(glmtree, newdata = testdat, re.form = ~0)
#
# MSE[(k-1)*10+i,1] <- mean((testdat$unsafe - pred_glmtree)^2)
# tree_size[(k-1)*10+i,1] <- (length(glmtree$tree)-1)/2
#
# ######  fit multilevel BART ######
# Mbart <- rbart_vi(unsafe ~ age + sex + economic + crowded,
#    data = traindat, group.by = traindat$street,
#    test = testdat, group.by.test = testdat$street,
#    combineChains = TRUE, seed = 42, verbose = FALSE)
#
# posterior <- Mbart$yhat.train
#
# MSE[(k-1)*10+i,2] <- mean((testdat$unsafe - Mbart$yhat.test.mean)^2)
# fit BaBart GLMM trees with different sizes of Ngen using Baygen and smearing
for(ngen in ngensizes){
# Bayesian data generation
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
# ###### Baygen Weighted ######
# babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
#                data = surr_mlbart,
#                weights = rep(1/ngen, times = nrow(surr_mlbart)))
#
# pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
# MSE[(k-1)*10+i,3+match(ngen,ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,3+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
# ###### Baygen NOT Weighted ######
# if(ngen != 1){
#   babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
#                  data = surr_mlbart)
#
#   pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
#   MSE[(k-1)*10+i,2+match(ngen,ngensizes)+length(ngensizes)+nrow(BaSmear_design)] <- mean((testdat$unsafe - pred_babart)^2)# :s
#   tree_size[(k-1)*10+i,2+match(ngen,ngensizes)+length(ngensizes)+nrow(BaSmear_design)] <- (length(babart$tree)-1)/2
# }
# smearing HIER MOET DE CLUSTERSTRUCTUUR NOG WORDEN BEHOUDEN
for(palt in palts){
# surr_mlbart <- gendata_smr(traindat, palt, ngen * nrow(traindat), keeps = c("street"))
# Mbart <- rbart_vi(unsafe ~ age + sex + economic + crowded,
#                   data = surr_mlbart, group.by = surr_mlbart$street,
#                   combineChains = TRUE, seed = 42, verbose = FALSE)
#
# y_gen <- Mbart$yhat.train.mean
#
# surr_mlbart <- cbind(surr_mlbart, y_gen)
# ###### Smearing Weighted ######
# babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
#                data = surr_mlbart,
#                weights = rep(1/ngen, times = nrow(surr_mlbart)))
#
# pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
# MSE[(k-1)*10+i,3+length(ngensizes)+match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,3+length(ngensizes)+match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- (length(babart$tree)-1)/2
##### Smearing NOT Weighted ######
if(ngen != 1){
# babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
#                data = surr_mlbart)
# pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
# MSE[(k-1)*10+i,2+length(ngensizes)*2+match(ngen,ngensizes)+
#       (match(palt, palts)-1)*length(ngensizes)+nrow(BaSmear_design)] <- mean((testdat$unsafe - pred_babart)^2)
# tree_size[(k-1)*10+i,2+length(ngensizes)*2+match(ngen,ngensizes)+
#             (match(palt, palts)-1)*length(ngensizes)+nrow(BaSmear_design)] <- (length(babart$tree)-1)/2
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE      [(k-1)*10+i,2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*(length(ngensizes)-1)+match(ngen, ngensizes)-1] <- 1
tree_size[(k-1)*10+i,2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*(length(ngensizes)-1)+match(ngen, ngensizes)-1] <- 2
}
}
}
tel <- tel + 1
print(paste0("[",round((tel)/(nreps*nfolds)*100),"%]"))
}
}
)
set.seed(42)
data = read_sav(file.path(here(),"Project David","Safety.sav"))
data <- data[1:100,]
set.seed(42)
nfolds <- 10
nreps <- 10
ngensizes <- c(1,5,10)
palts <- c(0, 0.25, 0.5)
BaSmear_design <- expand.grid(ngensizes, palts)
tel <- 0
use_weights <- TRUE
baygen <- TRUE
# ## Create objects for saving results
tree_size <- MSE <- as.data.frame(matrix(data = NA,
nrow = nfolds*nreps,
ncol = 3 +
length(ngensizes) +
nrow(BaSmear_design) +
length(ngensizes[ngensizes != 1]) +
nrow(BaSmear_design[!(BaSmear_design[,1] %in% 1),])))
colnames(tree_size) <- colnames(MSE) <- c("GLMM_tree", "Bart", "BA",
paste0("BaBart_N*",ngensizes),
paste0("Smearing_N*",BaSmear_design[,1], "_palt=",BaSmear_design[,2]),
paste0("BaBart_N*", ngensizes[ngensizes != 1], "_Nw"),
paste0("Smearing_N*",BaSmear_design[!(BaSmear_design[,1] %in% 1),][,1], "_palt=",
BaSmear_design[!(BaSmear_design[,1] %in% 1),][,2], "_Nw"))
system.time(
for (k in 1:nreps){
# Generate train-test splits
fold_ids <- sample(rep(1:nfolds, times = ceiling(nrow(data)/nfolds)),
size = nrow(data), replace = FALSE)
for (i in 1:nfolds){
# train-test split
traindat <- data[fold_ids != i, ]
testdat <- data[fold_ids == i, ]
# Check whether all factor levels in test are also in train, else omit from test
for (fact in c("street")) {
levs <- unique(testdat[ , fact]) %in% unique(traindat[ , fact])
if (!all(levs)) {
testdat <- testdat[-which(!testdat[ , fact] %in% unique(testdat[ , fact])[levs]), ]
print(paste0("Levels of fold ", i, " omitted from test data: ",
unique(testdat[ , fact])[!levs]))
}
}
###### Fit a regualar GLMM tree ######
glmtree <- lmertree(unsafe ~ 1 | (1|street) | age + sex + economic + crowded,
data = traindat)
pred_glmtree <- predict(glmtree, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,1] <- mean((testdat$unsafe - pred_glmtree)^2)
tree_size[(k-1)*10+i,1] <- (length(glmtree$tree)-1)/2
######  fit multilevel BART ######
Mbart <- rbart_vi(unsafe ~ age + sex + economic + crowded,
data = traindat, group.by = traindat$street,
test = testdat, group.by.test = testdat$street,
combineChains = TRUE, seed = 42, verbose = FALSE)
posterior <- Mbart$yhat.train
MSE[(k-1)*10+i,2] <- mean((testdat$unsafe - Mbart$yhat.test.mean)^2)
# fit BaBart GLMM trees with different sizes of Ngen using Baygen and smearing
for(ngen in ngensizes){
# Bayesian data generation
surr_mlbart <- gendata_bay(traindat, posterior, ngen * nrow(traindat))
###### Baygen Weighted ######
babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
data = surr_mlbart,
weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,3+match(ngen,ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
tree_size[(k-1)*10+i,3+match(ngen,ngensizes)] <- (length(babart$tree)-1)/2
###### Baygen NOT Weighted ######
if(ngen != 1){
babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
data = surr_mlbart)
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,2+match(ngen,ngensizes)+length(ngensizes)+nrow(BaSmear_design)] <- mean((testdat$unsafe - pred_babart)^2)# :s
tree_size[(k-1)*10+i,2+match(ngen,ngensizes)+length(ngensizes)+nrow(BaSmear_design)] <- (length(babart$tree)-1)/2
}
# smearing HIER MOET DE CLUSTERSTRUCTUUR NOG WORDEN BEHOUDEN
for(palt in palts){
surr_mlbart <- gendata_smr(traindat, palt, ngen * nrow(traindat), keeps = c("street"))
Mbart <- rbart_vi(unsafe ~ age + sex + economic + crowded,
data = surr_mlbart, group.by = surr_mlbart$street,
combineChains = TRUE, seed = 42, verbose = FALSE)
y_gen <- Mbart$yhat.train.mean
surr_mlbart <- cbind(surr_mlbart, y_gen)
###### Smearing Weighted ######
babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
data = surr_mlbart,
weights = rep(1/ngen, times = nrow(surr_mlbart)))
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE[(k-1)*10+i,3+length(ngensizes)+match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- mean((testdat$unsafe - pred_babart)^2)
tree_size[(k-1)*10+i,3+length(ngensizes)+match(ngen,ngensizes)+(match(palt, palts)-1)*length(ngensizes)] <- (length(babart$tree)-1)/2
##### Smearing NOT Weighted ######
if(ngen != 1){
babart <- lmertree(y_gen ~ 1 | (1|street) | age + sex + economic + crowded,
data = surr_mlbart)
pred_babart <- predict(babart, newdata = testdat, re.form = ~0)
MSE      [(k-1)*10+i,2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*(length(ngensizes)-1)+match(ngen, ngensizes)-1] <- mean((testdat$unsafe - pred_babart)^2)
tree_size[(k-1)*10+i,2+length(ngensizes)*2+nrow(BaSmear_design)+(match(palt, palts)-1)*(length(ngensizes)-1)+match(ngen, ngensizes)-1] <- (length(babart$tree)-1)/2
}
}
}
tel <- tel + 1
print(paste0("[",round((tel)/(nreps*nfolds)*100),"%]"))
}
}
)
